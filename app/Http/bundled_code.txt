

=== File: Kernel.php ===

<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array<int, class-string|string>
     */
    protected $middleware = [
        // \App\Http\Middleware\TrustHosts::class,
        \App\Http\Middleware\TrustProxies::class,
        \Illuminate\Http\Middleware\HandleCors::class,
        \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array<string, array<int, class-string|string>>
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            // \Illuminate\Session\Middleware\AuthenticateSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
            \App\Http\Middleware\CheckRedisConnection::class,
        ],

        'api' => [
            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's middleware aliases.
     *
     * Aliases may be used instead of class names to conveniently assign middleware to routes and groups.
     *
     * @var array<string, class-string|string>
     */
    protected $middlewareAliases = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'auth.session' => \Illuminate\Session\Middleware\AuthenticateSession::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
        'save.trip.after.login' => \App\Http\Middleware\SaveTripAfterLogin::class,
        'tripmember' => \App\Http\Middleware\CheckTripMembership::class,
        'set.language' => \App\Http\Middleware\SetLanguage::class,
        'trip.step' => \App\Http\Middleware\TripStepMiddleware::class,
    ];
}

=== File: Middleware/VerifyCsrfToken.php ===

<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;
use Illuminate\Support\Facades\Log;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        // Only exclude third-party callbacks that can't provide CSRF tokens
        'auth/*/callback'
    ];
    
    /**
     * Add custom CSRF cookie and header name configuration
     */
    protected function tokensMatch($request)
    {
        $token = $this->getTokenFromRequest($request);
        $sessionToken = $request->session()->token();
        
        // Log token data in debug mode only
        if (config('app.debug')) {
            Log::debug('CSRF check', [
                'has_token' => $request->session()->has('_token'),
                'session_id' => $request->session()->getId(),
                'request_token' => $token,
                'session_token' => $sessionToken,
                'match' => hash_equals($sessionToken, $token)
            ]);
        }
        
        return is_string($request->session()->token()) &&
               is_string($token) &&
               hash_equals($request->session()->token(), $token);
    }
}

=== File: Middleware/SessionFixMiddleware.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cookie;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;

class SessionFixMiddleware
{
    /**
     * Handle an incoming request.
     */
    public function handle(Request $request, Closure $next): Response
    {
        // Make sure we have a valid session ID
        if (!$request->session()->isStarted()) {
            $request->session()->start();
        }
        
        // Debug session info in local environment
        if (app()->environment('local') && config('app.debug')) {
            Log::debug('Session info', [
                'has_session' => $request->hasSession(),
                'session_id' => $request->session()->getId(),
                'has_token' => $request->session()->has('_token'),
                'csrf_token' => $request->session()->token(),
                'cookies' => $request->cookies->all(),
            ]);
        }
        
        $response = $next($request);
        
        // Ensure session cookie is present in response
        if (!$response->headers->has('Set-Cookie') && $request->session()->isStarted()) {
            $cookie = Cookie::make(
                config('session.cookie'), 
                $request->session()->getId(), 
                config('session.lifetime'),
                config('session.path'), 
                config('session.domain'),
                config('session.secure'), 
                config('session.http_only'),
                false, 
                config('session.same_site')
            );
            
            $response->headers->setCookie($cookie);
        }
        
        return $response;
    }
}

=== File: Middleware/SetLanguage.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Auth;

class SetLanguage
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        if (Auth::check() && Auth::user()->preferred_language) {
            app()->setLocale(Auth::user()->preferred_language);
        } else {
            // Set default language from session if available
            $locale = Session::get('locale', config('app.locale'));
            app()->setLocale($locale);
        }
        
        return $next($request);
    }
}

=== File: Middleware/CheckTripMembership.php ===

<?php

namespace App\Http\Middleware;

use App\Models\Trip;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class CheckTripMembership
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        // Get the trip from the route parameters
        $trip = $request->route('trip');
        
        if (!$trip instanceof Trip) {
            abort(404, 'Trip not found');
        }
        
        if (!Auth::check()) {
            return redirect()->route('login');
        }
        
        $userId = Auth::id();
        
        // Check if user is trip creator or member
        if ($trip->creator_id !== $userId && !$trip->isMember($userId)) {
            abort(403, 'You do not have access to this trip');
        }
        
        return $next($request);
    }
}

=== File: Middleware/SaveTripAfterLogin.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Log;

class SaveTripAfterLogin
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        // Process the request first to allow authentication to complete
        $response = $next($request);

        // Only proceed if user is authenticated
        if (Auth::check()) {
            $user = Auth::user();

            // Restore social authentication trip data if present
            if (session()->has('social_auth_trip_data')) {
                $tripData = session('social_auth_trip_data');
                foreach ($tripData as $key => $value) {
                    session([$key => $value]);
                }
                session()->forget('social_auth_trip_data');
                Log::info('Restored trip data from social auth session');
            }

            // Check if we have trip data to save
            $hasMinimumTripData = session('selected_trip_type') && 
                                (session('selected_destination') || session('selected_trip_template'));
            $shouldSave = session('trip_data_not_saved', false);

            if ($shouldSave && $hasMinimumTripData) {
                // Instead of processing immediately, defer it to after response is sent
                $this->deferTripCreation($user->id);
                
                // Set flash message and clear flag immediately
                session()->flash('success', 'Your trip is being created! You\'ll see it in your trips shortly.');
                session()->forget('trip_data_not_saved');
                
                Log::info('Trip creation deferred for user', ['user_id' => $user->id]);
            } else {
                // Clear the flag if no data to save
                session()->forget('trip_data_not_saved');
            }
        }

        return $response;
    }

    /**
     * Defer trip creation to after response is sent
     */
    private function deferTripCreation($userId)
    {
        // Gather all session data
        $tripData = [
            'user_id' => $userId,
            'trip_type' => session('selected_trip_type'),
            'destination' => session('selected_destination'),
            'template_id' => session('selected_trip_template'),
            'trip_details' => session('trip_details'),
            'trip_activities' => session('trip_activities'),
            'trip_invites' => session('trip_invites'),
            'selected_optional_activities' => session('selected_optional_activities'),
            'trip_total_price' => session('trip_total_price', 0)
        ];

        // Use Laravel's built-in dispatch after response
        dispatch(function() use ($tripData) {
            $this->createTripFromSessionData($tripData);
        })->afterResponse();

        // Clear session data immediately
        $this->clearTripSessionData();
    }

    /**
     * Create trip from session data (runs after response is sent)
     */
    private function createTripFromSessionData($tripData)
    {
        try {
            $user = \App\Models\User::find($tripData['user_id']);
            if (!$user) {
                Log::error('User not found for trip creation', ['user_id' => $tripData['user_id']]);
                return;
            }

            // Create the trip
            $trip = $this->createTrip($user, $tripData);
            
            // Create savings wallet
            $this->createSavingsWallet($trip);

            // Create itineraries
            if ($tripData['trip_type'] === 'pre_planned' && $tripData['template_id']) {
                $this->createItinerariesFromTemplate($trip);
            } elseif ($tripData['trip_activities']) {
                $this->createItinerariesFromSessionData($trip, $tripData['trip_activities']);
            } else {
                $this->createEmptyItineraries($trip);
            }

            // Process invites
            if ($tripData['trip_invites']) {
                $this->processInvites($trip, $tripData['trip_invites']);
            }

            // Add creator as member
            \App\Models\TripMember::create([
                'trip_id' => $trip->id,
                'user_id' => $user->id,
                'role' => 'organizer',
                'invitation_status' => 'accepted'
            ]);

            Log::info('Trip created successfully in background', [
                'trip_id' => $trip->id,
                'user_id' => $user->id
            ]);

        } catch (\Exception $e) {
            Log::error('Error creating trip from session data', [
                'error' => $e->getMessage(),
                'user_id' => $tripData['user_id'] ?? null
            ]);
        }
    }

    /**
     * Create the main trip record
     */
    private function createTrip($user, $tripData)
    {
        $trip = new \App\Models\Trip();
        $trip->creator_id = $user->id;
        $trip->planning_type = $tripData['trip_type'];

        // Set template if pre-planned
        if ($tripData['trip_type'] === 'pre_planned' && $tripData['template_id']) {
            $trip->trip_template_id = $tripData['template_id'];
        }

        // Set destination
        if ($tripData['destination']) {
            $trip->destination = $tripData['destination']['name'];
        }

        // Set trip details
        $tripDetails = $tripData['trip_details'] ?? [];
        $trip->title = $tripDetails['title'] ?? ('Trip to ' . ($tripData['destination']['name'] ?? 'Unknown'));
        $trip->description = $tripDetails['description'] ?? null;
        $trip->start_date = $tripDetails['start_date'] ?? \Carbon\Carbon::now()->addWeeks(2);
        $trip->end_date = $tripDetails['end_date'] ?? \Carbon\Carbon::now()->addWeeks(3);
        $trip->budget = $tripDetails['budget'] ?? $tripData['trip_total_price'] ?? null;
        $trip->total_cost = $tripDetails['total_cost'] ?? $tripData['trip_total_price'] ?? $trip->budget;
        $trip->status = 'planning';

        // Save selected optional activities if pre-planned
        if ($tripData['selected_optional_activities']) {
            $trip->selected_optional_activities = json_encode($tripData['selected_optional_activities']);
        }

        $trip->save();
        return $trip;
    }

    /**
     * Create a savings wallet for the trip
     */
    private function createSavingsWallet($trip)
    {
        \App\Models\SavingsWallet::create([
            'trip_id' => $trip->id,
            'name' => ['en' => 'Savings for ' . $trip->title],
            'minimum_goal' => $trip->budget ?? 0,
            'current_amount' => 0,
            'target_date' => $trip->start_date,
            'contribution_frequency' => 'weekly',
            'currency' => 'USD',
        ]);
    }

    /**
     * Create itineraries from template
     */
    private function createItinerariesFromTemplate($trip)
    {
        if (method_exists($trip, 'createItinerariesFromTemplate')) {
            $trip->createItinerariesFromTemplate();
        }
    }

    /**
     * Create itineraries and activities from session data
     */
    private function createItinerariesFromSessionData($trip, $tripActivities)
    {
        $startDate = \Carbon\Carbon::parse($trip->start_date);

        foreach ($tripActivities as $day => $activities) {
            $date = clone $startDate;
            $date->addDays($day - 1);

            // Create an itinerary for this day
            $itinerary = \App\Models\Itinerary::create([
                'trip_id' => $trip->id,
                'title' => "Day $day: " . $trip->destination,
                'description' => "Itinerary for day $day in " . $trip->destination,
                'day_number' => $day,
                'date' => $date,
            ]);

            // Add activities for this day
            foreach ($activities as $activityData) {
                \App\Models\Activity::create([
                    'itinerary_id' => $itinerary->id,
                    'title' => $activityData['title'],
                    'description' => $activityData['description'] ?? null,
                    'location' => $activityData['location'] ?? null,
                    'start_time' => $activityData['start_time'] ?? null,
                    'end_time' => $activityData['end_time'] ?? null,
                    'cost' => $activityData['cost'] ?? null,
                    'created_by' => $trip->creator_id,
                    'category' => $activityData['category'] ?? 'activity',
                    'is_optional' => $activityData['is_optional'] ?? false,
                    'is_highlight' => $activityData['is_highlight'] ?? false,
                ]);
            }
        }
    }

    /**
     * Create empty itineraries based on trip duration
     */
    private function createEmptyItineraries($trip)
    {
        $startDate = \Carbon\Carbon::parse($trip->start_date);
        $endDate = \Carbon\Carbon::parse($trip->end_date);
        $days = $startDate->diffInDays($endDate) + 1;

        for ($day = 1; $day <= $days; $day++) {
            $date = clone $startDate;
            $date->addDays($day - 1);

            \App\Models\Itinerary::create([
                'trip_id' => $trip->id,
                'title' => "Day $day: " . $trip->destination,
                'description' => "Itinerary for day $day in " . $trip->destination,
                'day_number' => $day,
                'date' => $date,
            ]);
        }
    }

    /**
     * Process invites from session data
     */
    private function processInvites($trip, $invites)
    {
        foreach ($invites as $invite) {
            $email = $invite['email'] ?? null;
            if (!$email) continue;

            $user = \App\Models\User::where('email', $email)->first();

            \App\Models\TripMember::create([
                'trip_id' => $trip->id,
                'user_id' => $user ? $user->id : null,
                'invitation_email' => $user ? null : $email,
                'role' => 'member',
                'invitation_status' => 'pending'
            ]);
        }
    }

    /**
     * Clear trip planning session data
     */
    private function clearTripSessionData()
    {
        session()->forget([
            'selected_trip_type',
            'selected_destination',
            'selected_trip_template',
            'trip_details',
            'trip_activities',
            'trip_invites',
            'selected_optional_activities',
            'trip_total_price'
        ]);
    }
}

=== File: Middleware/CheckRedisConnection.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class CheckRedisConnection
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        // Only run check if Redis is the configured session driver
        if (config('session.driver') === 'redis') {
            try {
                // Attempt to ping Redis
                \Illuminate\Support\Facades\Redis::connection()->ping();
            } catch (\Exception $e) {
                // If Redis connection fails, log the error and switch to file sessions
                Log::warning('Redis connection failed, switching to file session driver: ' . $e->getMessage());
                config(['session.driver' => 'file']);
            }
        }
        
        return $next($request);
    }
}

=== File: Middleware/TripStepMiddleware.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;

class TripStepMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        // If we're in the process of creating a trip
        if ($request->route()->getName() === 'trips.create') {
            // Ensure step is initialized
            if (!session()->has('trip_current_step')) {
                session(['trip_current_step' => 0]);
            }
            
            // Get current step from session
            $step = session('trip_current_step', 0);
            
            // Validate if requirements for current step are met
            if ($step >= 1 && !session()->has('selected_destination')) {
                // Force back to destination selection
                session(['trip_current_step' => 0]);
            } else if ($step >= 2 && !session()->has('trip_details')) {
                // Force back to trip details
                session(['trip_current_step' => 1]);
            }
        }
        
        return $next($request);
    }
}

=== File: Middleware/RedirectIfAuthenticated.php ===

<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect()->route('dashboard');
            }
        }

        return $next($request);
    }
}

=== File: Controllers/SettingsController.php ===

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class SettingsController extends Controller
{
    /**
     * Display general settings.
     */
    public function general(): View
    {
        $user = Auth::user();
        
        // Get available languages
        $languages = [
            'en' => 'English',
            'fr' => 'French',
            'es' => 'Spanish',
            'sw' => 'Swahili'
        ];
        
        // Get available timezones
        $timezones = [
            'UTC' => 'UTC',
            'Africa/Nairobi' => 'Nairobi',
            'America/New_York' => 'New York',
            'Europe/London' => 'London',
            'Asia/Tokyo' => 'Tokyo'
        ];
        
        return view('livewire.pages.settings.general', compact('user', 'languages', 'timezones'));
    }

    /**
     * Update general settings.
     */
    public function updateGeneral(Request $request)
    {
        $user = Auth::user();
        
        // Validate request
        $validated = $request->validate([
            'language' => 'required|string|in:en,fr,es,sw',
            'timezone' => 'required|string',
            'currency' => 'required|string|in:USD,EUR,KES,GBP',
        ]);
        
        // Update session settings
        session(['language' => $validated['language']]);
        session(['timezone' => $validated['timezone']]);
        session(['currency' => $validated['currency']]);
        
        return redirect()->route('settings.general')
            ->with('success', 'General settings updated successfully!');
    }

    /**
     * Display privacy settings.
     */
    public function privacy(): View
    {
        $user = Auth::user();
        return view('livewire.pages.settings.privacy', compact('user'));
    }

    /**
     * Update privacy settings.
     */
    public function updatePrivacy(Request $request)
    {
        $user = Auth::user();
        
        // Validate request
        $validated = $request->validate([
            'profile_visibility' => 'required|string|in:public,friends,private',
            'show_activity' => 'nullable|boolean',
            'show_trips' => 'nullable|boolean',
            'allow_friend_requests' => 'nullable|boolean',
        ]);
        
        // TODO: Update user privacy settings based on your database structure
        
        return redirect()->route('settings.privacy')
            ->with('success', 'Privacy settings updated successfully!');
    }

    /**
     * Display payment settings.
     */
    public function payments(): View
    {
        $user = Auth::user();
        
        // Get user's payment methods
        // For demonstration, using empty array
        $paymentMethods = [];
        
        return view('livewire.pages.settings.payments', compact('user', 'paymentMethods'));
    }

    /**
     * Update payment settings.
     */
    public function updatePayments(Request $request)
    {
        $user = Auth::user();
        
        // Validate request
        $validated = $request->validate([
            'default_payment_method' => 'nullable|string',
            'auto_contribute' => 'nullable|boolean',
        ]);
        
        // TODO: Update user payment settings based on your database structure
        
        return redirect()->route('settings.payments')
            ->with('success', 'Payment settings updated successfully!');
    }
}

=== File: Controllers/NotificationController.php ===

<?php

namespace App\Http\Controllers;

use App\Models\Notification;
use App\Services\NotificationService;
use Illuminate\Http\Request;
use Illuminate\View\View;

class NotificationController extends Controller
{
    protected NotificationService $notificationService;
    
    public function __construct(NotificationService $notificationService)
    {
        $this->notificationService = $notificationService;
    }
    
    public function index(): View
    {
        $notifications = Notification::where('user_id', auth()->id())
            ->orderBy('created_at', 'desc')
            ->paginate(20);
            
        return view('livewire.pages.notifications.index', compact('notifications'));
    }
    
    public function markAsRead(Notification $notification)
    {
        // Ensure the notification belongs to the user
        if ($notification->user_id !== auth()->id()) {
            return back()->with('error', 'Unauthorized action.');
        }
        
        $this->notificationService->markAsRead($notification);
        
        return back()->with('success', 'Notification marked as read.');
    }
    
    public function markAllAsRead()
    {
        $user = auth()->user();
        
        Notification::where('user_id', $user->id)
            ->whereNull('read_at')
            ->update(['read_at' => now()]);
            
        return back()->with('success', 'All notifications marked as read.');
    }
}

=== File: Controllers/WelcomeController.php ===

<?php

namespace App\Http\Controllers;

use App\Models\Destination;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;

class WelcomeController extends Controller
{
    public function index()
    {
        // Get popular destinations for the welcome page
        $popularDestinations = Destination::with('tripTemplates')
            ->whereHas('tripTemplates')
            ->take(6)
            ->get();

        return view('welcome', compact('popularDestinations'));
    }

    public function searchDestinations(Request $request)
    {
        $query = $request->get('query', '');
        
        if (strlen($query) < 2) {
            return response()->json([]);
        }

        $destinations = Destination::where('name', 'LIKE', "%{$query}%")
            ->orWhere('city', 'LIKE', "%{$query}%")
            ->orWhere('country', 'LIKE', "%{$query}%")
            ->take(5)
            ->get(['id', 'name', 'city', 'country']);

        return response()->json($destinations);
    }

    public function planTrip(Request $request)
    {
        $request->validate([
            'destination' => 'required|string|max:255',
            'trip_type' => 'required|in:pre_planned,self_planned',
        ]);

        // Store the selected destination and trip type in session
        Session::put([
            'selected_destination' => $request->destination,
            'selected_trip_type' => $request->trip_type,
        ]);

        // Redirect to the appropriate planning flow
        if ($request->trip_type === 'pre_planned') {
            return redirect()->route('trips.pre-planned')->with('destination', $request->destination);
        } else {
            return redirect()->route('trips.plan')->with('destination', $request->destination);
        }
    }
}

=== File: Controllers/Controller.php ===

<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}


=== File: Controllers/SavingsWalletController.php ===

<?php

namespace App\Http\Controllers;

use App\Models\SavingsWallet;
use App\Models\Trip;
use App\Models\WalletTransaction;
use App\Services\SavingsService;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Gate;
use Illuminate\View\View;

class SavingsWalletController extends Controller
{
    protected $savingsService;

    public function __construct(SavingsService $savingsService)
    {
        $this->savingsService = $savingsService;
    }

    /**
     * Display the user's savings wallet overview.
     */
    public function index(): View
    {
        $user = Auth::user();
        
        // Get all wallets the user has access to
        $wallets = SavingsWallet::whereHas('trip.members', function($query) use ($user) {
            $query->where('user_id', $user->id);
        })
        ->with('trip')
        ->get();
        
        // Calculate totals
        $totalBalance = $wallets->sum('current_amount');
        $totalTarget = $wallets->sum('target_amount');
        $progressPercentage = $totalTarget > 0 ? min(100, round(($totalBalance / $totalTarget) * 100)) : 0;
        
        return view('livewire.pages.savings.index', compact('wallets', 'totalBalance', 'totalTarget', 'progressPercentage'));
    }

    /**
     * Show the savings wallet for a specific trip.
     */
    public function show(Trip $trip): View
    {
        // Check if user is a member of this trip
        if (! Gate::allows('view', $trip)) {
            throw new AuthorizationException('You are not authorized to view this trip\'s wallet.');
        }
        
        // Get the wallet
        $wallet = $trip->savingsWallet;
        
        // If no wallet exists yet, return a view to create one
        if (!$wallet) {
            return view('livewire.pages.savings.start', compact('trip'));
        }
        
        // Get recent transactions
        $transactions = WalletTransaction::where('wallet_id', $wallet->id)
            ->orderBy('created_at', 'desc')
            ->limit(5)
            ->get();
        
        return view('livewire.pages.savings.show', compact('trip', 'wallet', 'transactions'));
    }

    /**
     * Display the form to contribute to a wallet.
     */
    public function showContributeForm(): View
    {
        $user = Auth::user();
        
        // Get all wallets the user has access to
        $wallets = SavingsWallet::whereHas('trip.members', function($query) use ($user) {
            $query->where('user_id', $user->id);
        })
        ->with('trip')
        ->get();
        
        // Get payment methods (if implemented)
        $paymentMethods = [
            'mpesa' => 'M-Pesa',
            'card' => 'Credit/Debit Card',
            'bank' => 'Bank Transfer'
        ];
        
        return view('livewire.pages.savings.contribute', compact('wallets', 'paymentMethods'));
    }

    /**
     * Process a contribution to a wallet.
     */
    public function contribute(Request $request)
    {
        // Validate request
        $validated = $request->validate([
            'wallet_id' => 'required|exists:savings_wallets,id',
            'amount' => 'required|numeric|min:1',
            'payment_method' => 'required|string',
        ]);
        
        // Check if user is authorized to contribute to this wallet
        $wallet = SavingsWallet::findOrFail($validated['wallet_id']);
        
        if (! Gate::allows('contribute', $wallet)) {
            throw new AuthorizationException('You are not authorized to contribute to this wallet.');
        }
        
        // Process the contribution
        try {
            $this->savingsService->contribute(
                $wallet->id, 
                Auth::id(), 
                $validated['amount'], 
                $validated['payment_method']
            );
            
            return redirect()->route('wallet.index')
                ->with('success', 'Contribution of $' . $validated['amount'] . ' was successful.');
        } catch (\Exception $e) {
            return back()->withErrors(['error' => $e->getMessage()]);
        }
    }

    /**
     * Display the form to withdraw from a wallet.
     */
    public function showWithdrawForm(): View
    {
        $user = Auth::user();
        
        // Get all wallets the user has access to
        $wallets = SavingsWallet::whereHas('trip.members', function($query) use ($user) {
            $query->where('user_id', $user->id)
                ->where('role', 'organizer'); // Only organizers can withdraw
        })
        ->with('trip')
        ->get();
        
        return view('livewire.pages.savings.withdraw', compact('wallets'));
    }

    /**
     * Process a withdrawal from a wallet.
     */
    public function withdraw(Request $request)
    {
        // Validate request
        $validated = $request->validate([
            'wallet_id' => 'required|exists:savings_wallets,id',
            'amount' => 'required|numeric|min:1',
            'reason' => 'nullable|string',
        ]);
        
        // Check if user is authorized to withdraw from this wallet
        $wallet = SavingsWallet::findOrFail($validated['wallet_id']);
        
        if (! Gate::allows('withdraw', $wallet)) {
            throw new AuthorizationException('You are not authorized to withdraw from this wallet.');
        }
        
        // Process the withdrawal
        try {
            $this->savingsService->withdraw(
                $wallet->id, 
                Auth::id(), 
                $validated['amount']
            );
            
            return redirect()->route('wallet.index')
                ->with('success', 'Withdrawal of $' . $validated['amount'] . ' was successful.');
        } catch (\Exception $e) {
            return back()->withErrors(['error' => $e->getMessage()]);
        }
    }

    /**
     * Display transaction history.
     */
    public function transactions(): View
    {
        $user = Auth::user();
        
        // Get all transactions for wallets the user has access to
        $transactions = WalletTransaction::whereHas('wallet.trip.members', function($query) use ($user) {
            $query->where('user_id', $user->id);
        })
        ->with(['wallet.trip', 'user'])
        ->orderBy('created_at', 'desc')
        ->paginate(15);
        
        return view('livewire.pages.savings.transactions', compact('transactions'));
    }

    /**
     * Set up a new savings wallet for a trip.
     */
    public function start(Request $request, Trip $trip)
    {
        // Check if user is authorized to set up a wallet for this trip
        if (! Gate::allows('update', $trip)) {
            throw new AuthorizationException('You are not authorized to set up a wallet for this trip.');
        }
        
        // Validate request
        $validated = $request->validate([
            'target_amount' => 'required|numeric|min:1',
            'target_date' => 'nullable|date|after:today',
            'contribution_frequency' => 'required|in:weekly,monthly',
        ]);
        
        // Create the wallet
        $wallet = new SavingsWallet();
        $wallet->trip_id = $trip->id;
        $wallet->name = $trip->title . ' Savings';
        $wallet->target_amount = $validated['target_amount'];
        $wallet->current_amount = 0;
        $wallet->target_date = $validated['target_date'] ?? null;
        $wallet->contribution_frequency = $validated['contribution_frequency'];
        $wallet->save();
        
        return redirect()->route('trips.savings', $trip)
            ->with('success', 'Savings wallet created successfully!');
    }
}

=== File: Controllers/DashboardController.php ===

<?php

namespace App\Http\Controllers;

use App\Models\Trip;
use App\Models\SavingsWallet;
use App\Models\TripMember;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\View\View;
use Carbon\Carbon;

class DashboardController extends Controller
{
    /**
     * Display the dashboard with real data from the database.
     */
    public function index(Request $request): View
    {
        // Check if user is authenticated
        if (!auth()->check()) {
            return redirect()->route('login');
        }
        
        $user = auth()->user();
        
        // Debug: Log user information
        Log::info('Dashboard for user', [
            'user_id' => $user->id,
            'email' => $user->email
        ]);
        
        try {
            // Get trips where user is the creator
            $createdTrips = $user->createdTrips()->get();
            
            // Get trips where user is a member
            $memberTrips = Trip::join('trip_members', 'trips.id', '=', 'trip_members.trip_id')
                ->where('trip_members.user_id', $user->id)
                ->where('trip_members.invitation_status', 'accepted')
                ->select('trips.*')
                ->distinct()
                ->get();
            
            // Combine both sets and remove duplicates
            $allTrips = $createdTrips->merge($memberTrips)->unique('id');
            
            // Log what we found
            Log::info('Found trips for dashboard', [
                'user_id' => $user->id,
                'trips_count' => $allTrips->count(),
                'trip_ids' => $allTrips->pluck('id')->toArray()
            ]);
            
            // Format trips for display
            $upcomingTrips = $allTrips->map(function($trip) {
                // Make sure date is Carbon instance
                $startDate = $trip->start_date instanceof Carbon ? 
                    $trip->start_date : 
                    Carbon::parse($trip->start_date);
                    
                $endDate = $trip->end_date instanceof Carbon ? 
                    $trip->end_date : 
                    Carbon::parse($trip->end_date);
                
                // Get savings wallet data if it exists
                $progressPercentage = 0;
                if ($trip->savingsWallet) {
                    $progressPercentage = $trip->savingsWallet->progress_percentage;
                }
                
                // Count members
                $memberCount = $trip->members ? $trip->members->count() : 1;
                
                return (object)[
                    'id' => $trip->id,
                    'title' => $trip->title,
                    'destination' => $trip->destination,
                    'start_date' => $startDate,
                    'end_date' => $endDate,
                    'progress' => $progressPercentage,
                    'members' => $memberCount
                ];
            });
            
            // Sort by start date
            $upcomingTrips = $upcomingTrips->sortBy('start_date');
            
            // If no trips, provide a default
            if ($upcomingTrips->isEmpty()) {
                $upcomingTrips = collect([(object)[
                    'id' => 0,
                    'title' => 'No Upcoming Trips',
                    'destination' => 'Start planning your adventure!',
                    'start_date' => now()->addWeeks(2),
                    'end_date' => now()->addWeeks(3),
                    'progress' => 0,
                    'members' => 1,
                ]]);
            }
            
            // Get wallet data
            $walletData = $this->getWalletData($user, $allTrips);
            
            // Create activities based on trips
            $recentActivities = $this->getRecentActivities($allTrips);
            
            // Get pending invitations
            $invitations = $this->getPendingInvitations($user);
            
            // Calculate stats
            $stats = $this->calculateStats($user, $allTrips);
            
        } catch (\Exception $e) {
            // Log error for debugging
            Log::error('Error loading dashboard data', [
                'user_id' => $user->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            // Set default values
            $upcomingTrips = collect([(object)[
                'id' => 0,
                'title' => 'No Upcoming Trips',
                'destination' => 'Start planning your adventure!',
                'start_date' => now()->addWeeks(2),
                'end_date' => now()->addWeeks(3),
                'progress' => 0,
                'members' => 1,
            ]]);
            
            $walletData = [
                'balance' => 0,
                'target_amount' => 1.00,
                'progress_percentage' => 0,
                'monthly_growth_percentage' => 0
            ];
            
            $recentActivities = collect([(object)[
                'id' => 1,
                'type' => 'contribution',
                'amount' => 0,
                'date' => now()->subDays(1),
                'trip' => 'Start your journey!'
            ]]);
            
            $invitations = collect();
            
            $stats = [
                'trips_planned' => 0,
                'trips_completed' => 0,
                'trips_upcoming' => 0,
                'friends_onboarded' => 0,
                'monthly_growth_percentage' => 0
            ];
        }
        
        return view('livewire.pages.dashboard', [
            'upcomingTrips' => $upcomingTrips,
            'wallet' => $walletData,
            'recentActivities' => $recentActivities,
            'invitations' => $invitations,
            'stats' => $stats,
        ]);
    }
    
    /**
     * Get wallet data for the dashboard
     */
    private function getWalletData($user, $trips)
    {
        $wallets = SavingsWallet::whereIn('trip_id', $trips->pluck('id'))->get();
        
        $balance = $wallets->sum('current_amount');
        $targetAmount = $wallets->sum('minimum_goal');
        
        if ($targetAmount <= 0) {
            $targetAmount = max(1, $trips->sum('budget') ?: 1);
        }
        
        $progressPercentage = 0;
        if ($targetAmount > 0) {
            $progressPercentage = min(100, round(($balance / $targetAmount) * 100, 2));
        }
        
        return [
            'balance' => $balance,
            'target_amount' => $targetAmount,
            'progress_percentage' => $progressPercentage,
            'monthly_growth_percentage' => 0 // Calculate this later if needed
        ];
    }
    
    /**
     * Get recent activities for the dashboard
     */
    private function getRecentActivities($trips)
    {
        $activities = collect();
        
        foreach ($trips->take(3) as $index => $trip) {
            $activities->push((object)[
                'id' => $index + 1,
                'type' => 'itinerary_update',
                'date' => $trip->created_at ?: now()->subDays($index + 1),
                'trip' => $trip->title
            ]);
        }
        
        if ($activities->isEmpty()) {
            $activities->push((object)[
                'id' => 1,
                'type' => 'contribution',
                'amount' => 0,
                'date' => now()->subDays(1),
                'trip' => 'Start your journey!'
            ]);
        }
        
        return $activities;
    }
    
    /**
     * Get pending invitations for the user
     */
    private function getPendingInvitations($user)
    {
        return collect(); // Implement later if needed
    }
    
    /**
     * Calculate stats for the dashboard
     */
    private function calculateStats($user, $trips)
    {
        $now = now();
        
        return [
            'trips_planned' => $trips->count(),
            'trips_completed' => $trips->filter(function($trip) use ($now) {
                return $trip->end_date < $now;
            })->count(),
            'trips_upcoming' => $trips->filter(function($trip) use ($now) {
                return $trip->start_date >= $now;
            })->count(),
            'friends_onboarded' => 0,
            'monthly_growth_percentage' => 0
        ];
    }
}

=== File: Controllers/ItineraryController.php ===

<?php

namespace App\Http\Controllers;

use App\Models\Activity;
use App\Models\Itinerary;
use App\Models\Trip;
use Illuminate\Http\Request;
use Illuminate\View\View;

class ItineraryController extends Controller
{
    /**
     * Display the full itinerary for a trip.
     */
    public function index(Trip $trip): View
    {
        // Load all necessary relationships for the comprehensive view
        $trip->load([
            'creator',
            'members.user',
            'tripTemplate',
            'savingsWallet',
            'itineraries' => function ($query) {
                $query->orderBy('day_number')
                      ->with(['activities' => function ($activityQuery) {
                          $activityQuery->orderBy('start_time');
                      }]);
            }
        ]);
        
        // Get itineraries separately for easy access in the view
        $itineraries = $trip->itineraries;
        
        return view('livewire.pages.trips.itinerary', compact('trip', 'itineraries'));
    }
    
    /**
     * Show the form for editing the trip itinerary.
     */
    public function edit(Trip $trip): View
    {
        // Load itineraries with their activities for editing
        $trip->load([
            'itineraries' => function ($query) {
                $query->orderBy('day_number')
                      ->with('activities');
            }
        ]);
        
        return view('livewire.pages.trips.itinerary-edit', compact('trip'));
    }
    
    /**
     * Display the itinerary planner for a trip.
     */
    public function planner(Trip $trip): View
    {
        // Load itineraries with their activities, ordered by day number
        $itineraries = $trip->itineraries()
            ->orderBy('day_number')
            ->with('activities')
            ->get();
            
        return view('livewire.pages.itinerary.planner', compact('trip', 'itineraries'));
    }
    
    /**
     * Display the itinerary for a specific day.
     */
    public function show(Trip $trip, Itinerary $itinerary): View
    {
        // Ensure the itinerary belongs to this trip
        if ($itinerary->trip_id !== $trip->id) {
            abort(404);
        }
        
        // Load the itinerary with its activities
        $itinerary->load('activities');
        
        // Get the previous and next itineraries for navigation
        $prevItinerary = $trip->itineraries()
            ->where('day_number', '<', $itinerary->day_number)
            ->orderBy('day_number', 'desc')
            ->first();
            
        $nextItinerary = $trip->itineraries()
            ->where('day_number', '>', $itinerary->day_number)
            ->orderBy('day_number')
            ->first();
        
        return view('livewire.pages.itinerary.day', compact('trip', 'itinerary', 'prevItinerary', 'nextItinerary'));
    }
    
    /**
     * Update the specified itinerary.
     */
    public function update(Request $request, Trip $trip, Itinerary $itinerary)
    {
        // Ensure the itinerary belongs to this trip
        if ($itinerary->trip_id !== $trip->id) {
            abort(404);
        }
        
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);
        
        $itinerary->update($validated);
        
        return back()->with('success', 'Itinerary updated successfully!');
    }
    
    /**
     * Show the form for creating a new activity.
     */
    public function createActivity(Trip $trip, Itinerary $itinerary): View
    {
        // Ensure the itinerary belongs to this trip
        if ($itinerary->trip_id !== $trip->id) {
            abort(404);
        }
        
        $activityTypes = [
            'Cultural', 'Beach', 'Adventure', 'Food', 
            'Shopping', 'Nightlife', 'Relaxation', 'Sightseeing'
        ];
        
        return view('livewire.pages.itinerary.activity.create', compact('trip', 'itinerary', 'activityTypes'));
    }
    
    /**
     * Show the form for editing the specified activity.
     */
    public function editActivity(Trip $trip, Itinerary $itinerary, Activity $activity): View
    {
        // Check if the activity belongs to this itinerary and trip
        if ($activity->itinerary_id !== $itinerary->id || $itinerary->trip_id !== $trip->id) {
            abort(404);
        }
        
        $activityTypes = [
            'Cultural', 'Beach', 'Adventure', 'Food', 
            'Shopping', 'Nightlife', 'Relaxation', 'Sightseeing'
        ];
        
        return view('livewire.pages.itinerary.activity.edit', compact('trip', 'itinerary', 'activity', 'activityTypes'));
    }
}

=== File: Controllers/ProfileController.php ===

<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\SavingsWallet;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;
use Illuminate\Validation\Rule;

class ProfileController extends Controller
{
    /**
     * Display the user's profile dashboard.
     *
     * @return \Illuminate\View\View
     */
    public function show()
    {
        $user = Auth::user();
        $totalBalance = $user->total_savings ?? 0;
        $totalTarget = $user->total_savings_goal ?? 0;
        $progressPercentage = $user->savings_progress_percentage ?? 0;

        // Get the user's trips with their savings wallets
        $trips = $user->trips()->with('savingsWallet')->latest()->take(3)->get();

        return view('livewire.pages.profile.show', compact('user', 'totalBalance', 'totalTarget', 'progressPercentage', 'trips'));
    }

    /**
     * Show the form for editing the user's profile.
     *
     * @return \Illuminate\View\View
     */
    public function edit()
    {
        return view('livewire.pages.profile.edit', [
            'user' => Auth::user(),
        ]);
    }

/**
 * Update the user's profile information.
 *
 * @param  \Illuminate\Http\Request  $request
 * @return \Illuminate\Http\RedirectResponse
 */
public function update(Request $request)
{
    $user = Auth::user();

    $validated = $request->validate([
        'name' => ['required', 'string', 'max:255'],
        'email' => ['required', 'string', 'email', 'max:255', Rule::unique('users')->ignore($user->id)],
        'phone_number' => ['nullable', 'string', 'max:20'],
        'id_card_number' => ['nullable', 'string', 'max:50'],
        'passport_number' => ['nullable', 'string', 'max:50'],
        'date_of_birth' => ['nullable', 'date'],
        'gender' => ['nullable', Rule::in(['male', 'female', 'other'])],
        'nationality' => ['nullable', 'string', 'max:100'],
        'address' => ['nullable', 'string', 'max:255'],
        'profile_photo' => ['nullable', 'image', 'max:1024'],
    ]);

    // Handle the profile photo separately
    if ($request->hasFile('profile_photo')) {
        // Delete old photo if exists
        if ($user->profile_photo_path && !filter_var($user->profile_photo_path, FILTER_VALIDATE_URL)) {
            Storage::delete('public/' . $user->profile_photo_path);
        }

        $path = $request->file('profile_photo')->store('profile-photos', 'public');
        
        // Save the profile photo path directly to the user model
        $user->profile_photo_path = $path;
    }

    // Remove profile_photo from the validated array since it's not a database column
    if (isset($validated['profile_photo'])) {
        unset($validated['profile_photo']);
    }

    // Update user with validated data
    $user->fill($validated);
    $user->save();

    return redirect()->route('profile.edit')->with('success', 'Profile updated successfully.');
}

    /**
     * Show the security settings page.
     *
     * @return \Illuminate\View\View
     */
    public function security()
    {
        return view('livewire.pages.profile.security');
    }

    /**
     * Update the user's password.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updatePassword(Request $request)
    {
        $validated = $request->validate([
            'current_password' => ['required', 'string', 'current_password'],
            'password' => ['required', 'string', 'min:8', 'confirmed'],
        ]);

        Auth::user()->update([
            'password' => Hash::make($validated['password']),
        ]);

        return redirect()->route('profile.security')->with('success', 'Password updated successfully.');
    }

    /**
     * Show the notifications settings page.
     *
     * @return \Illuminate\View\View
     */
    public function notifications()
    {
        return view('livewire.pages.profile.notifications');
    }

    /**
     * Update notification preferences.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updateNotifications(Request $request)
    {
        // Implement notification settings update logic
        return redirect()->route('profile.notifications')->with('success', 'Notification preferences updated.');
    }

    /**
     * Delete the user's account.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy(Request $request)
    {
        $request->validate([
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return redirect('/');
    }

    /**
     * Show the account settings page.
     *
     * @return \Illuminate\View\View
     */
    public function account()
    {
        return view('livewire.pages.profile.account', [
            'user' => Auth::user(),
        ]);
    }

    /**
     * Update account settings.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updateAccount(Request $request)
    {
        $validated = $request->validate([
            'account_type' => ['required', Rule::in(['personal', 'business'])],
            'currency' => ['required', 'string', 'max:3'],
            'linked_bank_account' => ['nullable', 'string', 'max:255'],
            'wallet_provider' => ['nullable', 'string', 'max:255'],
            'account_status' => ['required', Rule::in(['active', 'inactive', 'pending'])],
            'preferred_payment_method' => ['required', Rule::in(['wallet', 'bank_transfer', 'credit_card', 'm_pesa'])],
            // Removed daily_transaction_limit since it doesn't exist
        ]);

        Auth::user()->update($validated);

        return redirect()->route('profile.account')->with('success', 'Account settings updated successfully.');
    }
}

=== File: Controllers/ActivityController.php ===

<?php

namespace App\Http\Controllers;

use App\Models\Activity;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class ActivityController extends Controller
{
    /**
     * Display a listing of activities for a trip.
     */
    public function index(Request $request)
    {
        $tripId = $request->input('trip_id');
        $dayNumber = $request->input('day');
        
        $activities = Activity::whereHas('itinerary', function($query) use ($tripId, $dayNumber) {
            $query->where('trip_id', $tripId);
            
            if ($dayNumber) {
                $query->where('day_number', $dayNumber);
            }
        })->get();
        
        return response()->json(['activities' => $activities]);
    }

    /**
     * Store a newly created activity in storage.
     */
    public function store(Request $request)
    {
        $request->validate([
            'itinerary_id' => 'required|exists:itineraries,id',
            'title' => 'required|string|max:255',
            'location' => 'nullable|string|max:255',
            'start_time' => 'nullable|date_format:H:i',
            'end_time' => 'nullable|date_format:H:i|after:start_time',
            'cost' => 'nullable|numeric|min:0',
        ]);
        
        $activity = Activity::create($request->all());
        
        return response()->json(['activity' => $activity, 'message' => 'Activity created successfully']);
    }

    /**
     * Get activity suggestion by ID.
     */
    public function getSuggestion($id)
    {
        // This would typically fetch from a database, but for this example,
        // we'll return some sample data
        $suggestions = [
            1 => [
                'name' => 'Kecak Fire Dance at Uluwatu',
                'location' => 'Uluwatu Temple',
                'cost' => 15,
                'category' => 'cultural',
                'description' => 'Experience the mesmerizing traditional Balinese Kecak dance performance at sunset, with the majestic Uluwatu Temple as the backdrop.',
            ],
            2 => [
                'name' => 'Seafood Dinner at Jimbaran Bay',
                'location' => 'Jimbaran Beach',
                'cost' => 30,
                'category' => 'food',
                'description' => 'Enjoy fresh seafood grilled to perfection right on the beach, with your feet in the sand as the sun sets over the ocean.',
            ],
        ];
        
        if (isset($suggestions[$id])) {
            return response()->json(['success' => true, 'data' => $suggestions[$id]]);
        }
        
        return response()->json(['success' => false, 'message' => 'Suggestion not found'], 404);
    }
    
    /**
     * Update the specified activity in storage.
     */
    public function update(Request $request, Activity $activity)
    {
        $request->validate([
            'title' => 'sometimes|required|string|max:255',
            'location' => 'nullable|string|max:255',
            'start_time' => 'nullable|date_format:H:i',
            'end_time' => 'nullable|date_format:H:i|after:start_time',
            'cost' => 'nullable|numeric|min:0',
        ]);
        
        $activity->update($request->all());
        
        return response()->json(['activity' => $activity, 'message' => 'Activity updated successfully']);
    }

    /**
     * Remove the specified activity from storage.
     */
    public function destroy(Activity $activity)
    {
        $activity->delete();
        
        return response()->json(['message' => 'Activity deleted successfully']);
    }
}

=== File: Controllers/TripController.php ===

<?php

namespace App\Http\Controllers;

use App\Models\Trip;
use App\Models\TripMember;
use App\Models\Itinerary;
use App\Models\Activity;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Log;
use Illuminate\View\View;
use Carbon\Carbon;

class TripController extends Controller
{
    /**
     * Display a listing of the user's trips.
     */
    public function index(): View
    {
        $user = Auth::user();

        // IMPROVED APPROACH - Get trips using multiple methods
        // 1. Get trips where user is the creator
        $createdTrips = Trip::where('creator_id', $user->id)->get();

        // 2. Get trips where user is a member through the trip_members table
        $memberTrips = Trip::join('trip_members', 'trips.id', '=', 'trip_members.trip_id')
            ->where('trip_members.user_id', $user->id)
            ->where('trip_members.invitation_status', 'accepted')
            ->select('trips.*')
            ->distinct()
            ->get();

        // 3. Merge both collections and remove duplicates
        $trips = $createdTrips->merge($memberTrips)->unique('id');

        // Eager load relationships
        if ($trips->isNotEmpty()) {
            $tripIds = $trips->pluck('id')->toArray();
            $trips = Trip::whereIn('id', $tripIds)
                ->with(['members', 'savingsWallet'])
                ->orderBy('start_date', 'desc')
                ->get();
        }

        // Log trips for debugging
        Log::info('Found trips in TripController index method', [
            'user_id' => $user->id,
            'trips_count' => $trips->count(),
            'trip_ids' => $trips->pluck('id')->toArray()
        ]);

        // Instead of redirecting, just remove the flag
        if (Session::has('trip_data_not_saved') && Session::get('trip_data_not_saved')) {
            Session::forget('trip_data_not_saved');
            // Flash a message instead of redirecting
            Session::flash('success', 'Your trip has been saved successfully!');
        }

        return view('livewire.pages.trips.index', compact('trips'));
    }

    /**
     * Display the specified trip.
     */
    public function show(Trip $trip): View
    {
        $user = Auth::user();

        // Detailed logging for debugging
        logger()->info('Trip access attempt', [
            'user_id' => $user->id,
            'trip_id' => $trip->id,
            'trip_creator_id' => $trip->creator_id,
            'is_creator' => $user->id === $trip->creator_id,
            'trip_members' => $trip->members()->get()->map(function ($member) {
                return [
                    'user_id' => $member->user_id,
                    'role' => $member->role,
                    'status' => $member->invitation_status
                ];
            })
        ]);

        // Check if user is a member of this trip
        if (! Gate::allows('view', $trip)) {
            throw new AuthorizationException('You are not authorized to view this trip.');
        }

        // Eager load relationships
        $trip->load([
            'members.user',
            'savingsWallet',
            'itineraries.activities',
            'tripTemplate'
        ]);

        return view('livewire.pages.trips.show', compact('trip'));
    }

    /**
     * Show the form for editing the specified trip.
     */
    public function edit(Trip $trip): View
    {
        // Check if user is authorized to edit this trip
        if (! Gate::allows('update', $trip)) {
            throw new AuthorizationException('You are not authorized to edit this trip.');
        }

        // Eager load relationships
        $trip->load(['members.user', 'savingsWallet']);

        return view('livewire.pages.trips.edit', compact('trip'));
    }

    /**
     * Update the specified trip in storage.
     */
    public function update(Request $request, Trip $trip)
    {
        // Check if user is authorized to update this trip
        if (! Gate::allows('update', $trip)) {
            throw new AuthorizationException('You are not authorized to update this trip.');
        }

        // Validate the request
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'destination' => 'required|string|max:255',
            'start_date' => 'required|date',
            'end_date' => 'required|date|after_or_equal:start_date',
            'budget' => 'nullable|numeric|min:' . ($trip->total_cost ?? 0),
            'status' => 'required|in:planning,active,completed',
        ], [
            'budget.min' => 'Budget cannot be less than the trip\'s total cost of $' .
                number_format($trip->total_cost ?? 0, 2)
        ]);

        // Update trip
        $trip->update($validated);

        return redirect()->route('trips.show', $trip)
            ->with('success', 'Trip updated successfully!');
    }

    /**
     * Remove the specified trip from storage.
     */
    public function destroy(Trip $trip)
    {
        // Check if user is authorized to delete this trip
        if (! Gate::allows('delete', $trip)) {
            throw new AuthorizationException('You are not authorized to delete this trip.');
        }

        // Delete trip
        $trip->delete();

        return redirect()->route('trips.index')
            ->with('success', 'Trip deleted successfully!');
    }

    /**
     * Store a newly created trip in storage.
     */
    public function store(Request $request)
    {
        // Validate request
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'destination' => 'required|string|max:255',
            'start_date' => 'required|date',
            'end_date' => 'required|date|after_or_equal:start_date',
            'budget' => 'nullable|numeric|min:0',
        ]);

        // Create trip
        $trip = new Trip();
        $trip->creator_id = Auth::id();
        $trip->planning_type = 'self_planned';
        $trip->title = $validated['title'];
        $trip->description = $validated['description'] ?? null;
        $trip->destination = $validated['destination'];
        $trip->start_date = $validated['start_date'];
        $trip->end_date = $validated['end_date'];
        $trip->budget = $validated['budget'] ?? null;
        $trip->total_cost = $validated['budget'] ?? null;  // For self-planned trips, total cost defaults to budget
        $trip->status = 'planning';
        $trip->save();

        // Add creator as trip member
        TripMember::create([
            'trip_id' => $trip->id,
            'user_id' => Auth::id(),
            'role' => 'organizer',
            'invitation_status' => 'accepted'
        ]);

        return redirect()->route('trips.show', $trip)
            ->with('success', 'Trip created successfully!');
    }

    /**
     * Create a trip from session data (after login)
     */
    public function createFromSession()
    {
        // Check if we have session data
        if (!Session::has('trip_data_not_saved') || !Session::get('trip_data_not_saved')) {
            return redirect()->route('trips.index');
        }

        // Get trip details from session
        $tripType = Session::get('selected_trip_type');
        $destination = Session::get('selected_destination');
        $tripDetails = Session::get('trip_details', []);
        $templateId = Session::get('selected_trip_template');
        $selectedOptionalActivities = Session::get('selected_optional_activities', []);

        // Create the trip
        $trip = new Trip();
        $trip->creator_id = Auth::id();
        $trip->planning_type = $tripType ?? 'self_planned';

        // Set trip properties
        $trip->title = $tripDetails['title'] ?? ('Trip to ' . ($destination['name'] ?? 'Unknown'));
        $trip->description = $tripDetails['description'] ?? null;
        $trip->destination = $destination['name'] ?? 'Unknown';
        $trip->start_date = $tripDetails['start_date'] ?? Carbon::now()->addWeek();
        $trip->end_date = $tripDetails['end_date'] ?? Carbon::now()->addWeek(2);
        $trip->status = 'planning';

        // Handle budget and optional activities for pre-planned trips
        if ($tripType === 'pre_planned' && $templateId) {
            $trip->trip_template_id = $templateId;

            // Get base price and selected optional activities
            $basePrice = Session::get('trip_base_price', 0);
            $selectedOptionalActivities = Session::get('selected_optional_activities', []);

            // Calculate total cost
            $totalCost = $basePrice;
            foreach ($selectedOptionalActivities as $activity) {
                if (isset($activity['cost'])) {
                    $totalCost += $activity['cost'];
                }
            }

            // Set total cost and budget
            $trip->total_cost = $totalCost;
            $trip->budget = $tripDetails['budget'] ?? $totalCost;

            // Save selected optional activities as JSON
            $trip->selected_optional_activities = $selectedOptionalActivities;
        } else {
            // For self-planned trips
            $trip->budget = $tripDetails['budget'] ?? 0;
            $trip->total_cost = $trip->budget;
        }

        $trip->save();

        // Add creator as trip member
        TripMember::create([
            'trip_id' => $trip->id,
            'user_id' => Auth::id(),
            'role' => 'organizer',
            'invitation_status' => 'accepted'
        ]);

        // Create itineraries from template if applicable
        if ($tripType === 'pre_planned' && $templateId) {
            $trip->createItinerariesFromTemplate();
        } else {
            // Create custom itineraries from session activities
            $this->createCustomItineraries($trip, Session::get('trip_activities', []));
        }

        // Add trip members from invites
        $this->addTripMembers($trip, Session::get('trip_invites', []));

        // Clear session data
        $this->clearTripSessionData();

        return redirect()->route('trips.show', $trip)
            ->with('success', 'Your trip has been created!');
    }

    /**
     * Create custom itineraries from session activities
     */
    private function createCustomItineraries(Trip $trip, array $activities)
    {
        if (empty($activities)) {
            return;
        }

        foreach ($activities as $day => $dayActivities) {
            // Calculate the date for this day
            $date = Carbon::parse($trip->start_date)->addDays($day - 1);

            // Create itinerary
            $itinerary = Itinerary::create([
                'trip_id' => $trip->id,
                'title' => "Day $day: " . $trip->destination,
                'description' => "Activities for day $day in " . $trip->destination,
                'day_number' => $day,
                'date' => $date,
            ]);

            // Create activities
            foreach ($dayActivities as $activityData) {
                Activity::create([
                    'itinerary_id' => $itinerary->id,
                    'title' => $activityData['title'],
                    'description' => $activityData['description'] ?? null,
                    'location' => $activityData['location'] ?? null,
                    'start_time' => $activityData['start_time'] ?? null,
                    'end_time' => $activityData['end_time'] ?? null,
                    'cost' => $activityData['cost'] ?? 0,
                    'category' => $activityData['category'] ?? 'activity',
                ]);
            }
        }
    }

    /**
     * Add trip members from invites
     */
    private function addTripMembers(Trip $trip, array $invites)
    {
        if (empty($invites)) {
            return;
        }

        foreach ($invites as $invite) {
            TripMember::create([
                'trip_id' => $trip->id,
                'invitation_email' => $invite['email'],
                'role' => 'member',
                'invitation_status' => 'pending'
            ]);
        }
    }

    /**
     * Clear trip planning session data
     */
    private function clearTripSessionData()
    {
        Session::forget([
            'selected_trip_type',
            'selected_destination',
            'selected_trip_template',
            'trip_details',
            'trip_activities',
            'trip_invites',
            'selected_optional_activities',
            'trip_data_not_saved'
        ]);
    }

    /**
     * Invite a user to the trip.
     */
    public function invite(Request $request, Trip $trip)
    {
        // Check if user is authorized to invite to this trip
        if (! Gate::allows('invite', $trip)) {
            throw new AuthorizationException('You are not authorized to invite users to this trip.');
        }

        // Validate request
        $validated = $request->validate([
            'email' => 'required|email|max:255',
        ]);

        // Create trip member invitation
        TripMember::create([
            'trip_id' => $trip->id,
            'invitation_email' => $validated['email'],
            'role' => 'member',
            'invitation_status' => 'pending'
        ]);

        return back()->with('success', 'Invitation sent successfully!');
    }

    /**
     * Display the trip planning form.
     */
    public function plan()
    {
        return view('livewire.pages.trips.create');
    }
}


=== File: Controllers/Auth/PasswordResetLinkController.php ===

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;

class PasswordResetLinkController extends Controller
{
    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                            ->withErrors(['email' => __($status)]);
    }
}

=== File: Controllers/Auth/AuthControllers.php.php ===

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use App\Models\User;

class RegisteredUserController extends Controller
{
    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
            'terms' => ['required', 'accepted'],
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect(route('dashboard'));
    }
}

class AuthenticatedSessionController extends Controller
{
    /**
     * Handle an incoming authentication request.
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ]);

        $credentials = $request->only('email', 'password');
        $remember = $request->boolean('remember');

        if (Auth::attempt($credentials, $remember)) {
            $request->session()->regenerate();

            return redirect()->intended(route('dashboard'));
        }

        return back()->withErrors([
            'email' => __('auth.failed'),
        ])->onlyInput('email');
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard'));
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}

class PasswordResetLinkController extends Controller
{
    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                            ->withErrors(['email' => __($status)]);
    }
}

class NewPasswordController extends Controller
{
    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function ($user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        return $status == Password::PASSWORD_RESET
                    ? redirect()->route('login')->with('status', __($status))
                    : back()->withInput($request->only('email'))
                            ->withErrors(['email' => __($status)]);
    }
}

class ConfirmablePasswordController extends Controller
{
    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(route('dashboard'));
    }
}

=== File: Controllers/Auth/SocialAuthController.php ===

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Hash;
use Laravel\Socialite\Facades\Socialite;

class SocialAuthController extends Controller
{
    /**
     * Redirect the user to the OAuth Provider.
     *
     * @param string $provider
     * @return \Illuminate\Http\RedirectResponse
     */
    public function redirectToProvider($provider)
    {
        // If we're in the middle of trip planning, save session data to special key
        if (
            session()->has('selected_trip_type') || 
            session()->has('selected_destination') || 
            session()->has('trip_details')
        ) {
            $tripDataKeys = [
                'selected_trip_type',
                'selected_destination',
                'selected_trip_template',
                'trip_details',
                'trip_activities',
                'trip_invites',
                'selected_optional_activities',
                'trip_total_price'
            ];
            
            $tripData = [];
            foreach ($tripDataKeys as $key) {
                if (session()->has($key)) {
                    $tripData[$key] = session($key);
                }
            }
            
            if (!empty($tripData)) {
                // Flag that we have trip data to save after authentication
                $tripData['trip_data_not_saved'] = true;
                
                // Store in a special session key that won't be lost during social auth
                session(['social_auth_trip_data' => $tripData]);
                Log::info('Stored trip data before social auth redirect', ['keys' => array_keys($tripData)]);
            }
        }
        
        return Socialite::driver($provider)->redirect();
    }

    /**
     * Obtain the user information from provider.
     *
     * @param string $provider
     * @return \Illuminate\Http\RedirectResponse
     */
    public function handleProviderCallback($provider)
    {
        try {
            $providerUser = Socialite::driver($provider)->user();
            
            // Check if the user already exists in our database
            $user = User::where('email', $providerUser->getEmail())->first();
            
            // If user doesn't exist, create a new one
            if (!$user) {
                $user = User::create([
                    'name' => $providerUser->getName(),
                    'email' => $providerUser->getEmail(),
                    'password' => Hash::make(substr(md5(rand()), 0, 16)), // Random password
                    'auth_provider' => $provider,
                    'auth_provider_id' => $providerUser->getId(),
                    'profile_photo_path' => $providerUser->getAvatar(),
                    'email_verified_at' => now() // Social accounts are considered verified
                ]);
            } 
            // If user exists but not linked to this provider, update provider info
            else if (!$user->auth_provider_id || $user->auth_provider_id !== $providerUser->getId()) {
                $user->update([
                    'auth_provider' => $provider,
                    'auth_provider_id' => $providerUser->getId(),
                ]);
                
                // Update profile photo if not set
                if (!$user->profile_photo_path) {
                    $user->update(['profile_photo_path' => $providerUser->getAvatar()]);
                }
            }
            
            // Login the user
            Auth::login($user);
            
            // If social_auth_trip_data session exists, restore it
            if (session()->has('social_auth_trip_data')) {
                $tripData = session('social_auth_trip_data');
                
                foreach ($tripData as $key => $value) {
                    session([$key => $value]);
                }
                
                session()->forget('social_auth_trip_data');
                Log::info('Restored trip data in social auth callback');
            }
            
            return redirect()->intended(RouteServiceProvider::HOME);
        } catch (\Exception $e) {
            Log::error('Social authentication error: ' . $e->getMessage());
            return redirect()->route('login')->with('error', 'Authentication failed. Please try again.');
        }
    }
}

=== File: Controllers/Auth/VerifyEmailController.php ===

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     *
     * @param  \Illuminate\Foundation\Auth\EmailVerificationRequest  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard').'?verified=1');
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(route('dashboard').'?verified=1');
    }
}

=== File: Controllers/Auth/AuthenticatedSessionController.php ===

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        // Check if we have trip planning data
        $hasTripData = session()->has('selected_trip_type') || 
                     session()->has('selected_destination') || 
                     session()->has('trip_details');
        
        return view('auth.login', ['hasTripData' => $hasTripData]);
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(Request $request)
    {
        // Start timing for performance debugging
        $startTime = microtime(true);
        
        // Log login attempt for debugging
        Log::info('User login initiated', [
            'email' => $request->email,
            'has_trip_data' => session()->has('trip_data_not_saved'),
            'session_id' => session()->getId()
        ]);

        // If we have trip data in session, mark it for saving
        if (
            session()->has('selected_trip_type') || 
            session()->has('selected_destination')
        ) {
            session(['trip_data_not_saved' => true]);

            Log::info('Trip data marked for saving after login', [
                'trip_type' => session('selected_trip_type'),
                'has_destination' => session()->has('selected_destination'),
                'has_trip_details' => session()->has('trip_details')
            ]);
        }

        try {
            // Validate credentials
            $credentials = $request->validate([
                'email' => ['required', 'string', 'email'],
                'password' => ['required', 'string'],
            ]);
            
            if (Auth::attempt($credentials, $request->boolean('remember'))) {
                $request->session()->regenerate();

                // Log successful login
                Log::info('User login successful', [
                    'email' => $request->email,
                    'user_id' => Auth::id(),
                    'time_taken' => microtime(true) - $startTime
                ]);

                // The SaveTripAfterLogin middleware will handle trip data saving
                return redirect()->intended(RouteServiceProvider::HOME);
            }

            // Log failed login
            Log::info('User login failed - invalid credentials', [
                'email' => $request->email,
                'time_taken' => microtime(true) - $startTime
            ]);

            return back()->withErrors([
                'email' => 'The provided credentials do not match our records.',
            ])->onlyInput('email');
            
        } catch (\Exception $e) {
            // Log login error
            Log::error('Login error', [
                'email' => $request->email,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return back()->withErrors([
                'email' => 'An error occurred during login. Please try again.',
            ])->onlyInput('email');
        }
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request)
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return redirect('/');
    }
}

=== File: Controllers/Auth/EmailVerificationNotificationController.php ===

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard'));
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}

=== File: Controllers/Auth/RegisteredUserController.php ===

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rules;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create()
    {
        // Check if we have trip planning data to customize the registration message
        $hasTripData = session()->has('selected_trip_type') || 
                       session()->has('selected_destination') || 
                       session()->has('trip_details');
        
        return view('auth.register', ['hasTripData' => $hasTripData]);
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request)
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Log registration step for debugging
        Log::info('User registration initiated', [
            'email' => $request->email,
            'has_trip_data' => session()->has('trip_data_not_saved')
        ]);

        // If we have trip data in session, mark it for saving after login
        if (
            session()->has('selected_trip_type') || 
            session()->has('selected_destination')
        ) {
            session(['trip_data_not_saved' => true]);

            Log::info('Trip data marked for saving after registration', [
                'trip_type' => session('selected_trip_type'),
                'has_destination' => session()->has('selected_destination'),
                'has_trip_details' => session()->has('trip_details')
            ]);
        }

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        event(new Registered($user));

         return redirect()->route('login')
            ->with('status', 'Your account has been created successfully! Please log in.');
    }
}

=== File: Controllers/Auth/ConfirmablePasswordController.php ===

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;

class ConfirmablePasswordController extends Controller
{
    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(route('dashboard'));
    }
}

=== File: Controllers/Auth/NewPasswordController.php ===

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;

class NewPasswordController extends Controller
{
    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function ($user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        return $status == Password::PASSWORD_RESET
                    ? redirect()->route('login')->with('status', __($status))
                    : back()->withInput($request->only('email'))
                            ->withErrors(['email' => __($status)]);
    }
}

=== File: Controllers/Admin/AdminController.php ===

<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\ActivityLog;
use Illuminate\Http\Request;

class AdminController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth', 'admin']);
    }

    /**
     * Show admin dashboard
     */
    public function dashboard()
    {
        $stats = $this->getDashboardStats();
        
        return view('admin.dashboard', compact('stats'));
    }

    /**
     * Get dashboard statistics
     */
    private function getDashboardStats()
    {
        return [
            'total_users' => \App\Models\User::count(),
            'active_users' => \App\Models\User::where('account_status', 'active')->count(),
            'admin_users' => \App\Models\User::where('is_admin', true)->count(),
            'total_trips' => \App\Models\Trip::count(),
            'active_trips' => \App\Models\Trip::where('status', 'active')->count(),
            'flagged_trips' => \App\Models\Trip::where('admin_status', 'flagged')->count(),
            'featured_trips' => \App\Models\Trip::where('is_featured', true)->count(),
            'total_wallets' => \App\Models\SavingsWallet::count(),
            'flagged_wallets' => \App\Models\SavingsWallet::where('admin_flagged', true)->count(),
            'total_transactions' => \App\Models\WalletTransaction::count(),
            'recent_activities' => ActivityLog::with('user')
                ->adminActions()
                ->latest()
                ->take(10)
                ->get()
        ];
    }
}