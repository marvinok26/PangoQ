

=== File: VerifyCsrfToken.php ===

<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;
use Illuminate\Support\Facades\Log;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        // Only exclude third-party callbacks that can't provide CSRF tokens
        'auth/*/callback'
    ];
    
    /**
     * Add custom CSRF cookie and header name configuration
     */
    protected function tokensMatch($request)
    {
        $token = $this->getTokenFromRequest($request);
        $sessionToken = $request->session()->token();
        
        // Log token data in debug mode only
        if (config('app.debug')) {
            Log::debug('CSRF check', [
                'has_token' => $request->session()->has('_token'),
                'session_id' => $request->session()->getId(),
                'request_token' => $token,
                'session_token' => $sessionToken,
                'match' => hash_equals($sessionToken, $token)
            ]);
        }
        
        return is_string($request->session()->token()) &&
               is_string($token) &&
               hash_equals($request->session()->token(), $token);
    }
}

=== File: SessionFixMiddleware.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cookie;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;

class SessionFixMiddleware
{
    /**
     * Handle an incoming request.
     */
    public function handle(Request $request, Closure $next): Response
    {
        // Make sure we have a valid session ID
        if (!$request->session()->isStarted()) {
            $request->session()->start();
        }
        
        // Debug session info in local environment
        if (app()->environment('local') && config('app.debug')) {
            Log::debug('Session info', [
                'has_session' => $request->hasSession(),
                'session_id' => $request->session()->getId(),
                'has_token' => $request->session()->has('_token'),
                'csrf_token' => $request->session()->token(),
                'cookies' => $request->cookies->all(),
            ]);
        }
        
        $response = $next($request);
        
        // Ensure session cookie is present in response
        if (!$response->headers->has('Set-Cookie') && $request->session()->isStarted()) {
            $cookie = Cookie::make(
                config('session.cookie'), 
                $request->session()->getId(), 
                config('session.lifetime'),
                config('session.path'), 
                config('session.domain'),
                config('session.secure'), 
                config('session.http_only'),
                false, 
                config('session.same_site')
            );
            
            $response->headers->setCookie($cookie);
        }
        
        return $response;
    }
}

=== File: SetLanguage.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\App;
use Symfony\Component\HttpFoundation\Response;

class SetLanguage
{
    public function handle(Request $request, Closure $next): Response
    {
        // Check if language is set in session
        if ($request->session()->has('locale')) {
            App::setLocale($request->session()->get('locale'));
        } elseif ($request->hasHeader('Accept-Language')) {
            // Use browser language if available
            $locale = substr($request->header('Accept-Language'), 0, 2);
            if (in_array($locale, config('app.available_locales', ['en']))) {
                App::setLocale($locale);
                $request->session()->put('locale', $locale);
            }
        }

        return $next($request);
    }
}

=== File: CheckTripMembership.php ===

<?php

namespace App\Http\Middleware;

use App\Models\Trip;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class CheckTripMembership
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        // Get the trip from the route parameters
        $trip = $request->route('trip');
        
        if (!$trip instanceof Trip) {
            abort(404, 'Trip not found');
        }
        
        if (!Auth::check()) {
            return redirect()->route('login');
        }
        
        $userId = Auth::id();
        
        // Check if user is trip creator or member
        if ($trip->creator_id !== $userId && !$trip->isMember($userId)) {
            abort(403, 'You do not have access to this trip');
        }
        
        return $next($request);
    }
}

=== File: CheckRedisConnection.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redis;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;

class CheckRedisConnection
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        try {
            // Test Redis connection
            Redis::ping();
        } catch (\Exception $e) {
            // Log the error
            Log::error('Redis connection failed: ' . $e->getMessage());
            
            // Use file cache driver as fallback
            config(['cache.default' => 'file']);
            config(['session.driver' => 'file']);
            config(['queue.default' => 'database']);
        }

        return $next($request);
    }
}

=== File: TripStepMiddleware.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;

class TripStepMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        // If we're in the process of creating a trip
        if ($request->route()->getName() === 'trips.create') {
            // Ensure step is initialized
            if (!session()->has('trip_current_step')) {
                session(['trip_current_step' => 0]);
            }
            
            // Get current step from session
            $step = session('trip_current_step', 0);
            
            // Validate if requirements for current step are met
            if ($step >= 1 && !session()->has('selected_destination')) {
                // Force back to destination selection
                session(['trip_current_step' => 0]);
            } else if ($step >= 2 && !session()->has('trip_details')) {
                // Force back to trip details
                session(['trip_current_step' => 1]);
            }
        }
        
        return $next($request);
    }
}

=== File: RedirectIfAuthenticated.php ===

<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect()->route('dashboard');
            }
        }

        return $next($request);
    }
}