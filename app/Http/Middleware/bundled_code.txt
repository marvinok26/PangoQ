

=== File: VerifyCsrfToken.php ===

<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        'register',
        'login',
        'auth/*/callback'
    ];
}

=== File: SetLanguage.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\App;
use Symfony\Component\HttpFoundation\Response;

class SetLanguage
{
    public function handle(Request $request, Closure $next): Response
    {
        // Check if language is set in session
        if ($request->session()->has('locale')) {
            App::setLocale($request->session()->get('locale'));
        } elseif ($request->hasHeader('Accept-Language')) {
            // Use browser language if available
            $locale = substr($request->header('Accept-Language'), 0, 2);
            if (in_array($locale, config('app.available_locales', ['en']))) {
                App::setLocale($locale);
                $request->session()->put('locale', $locale);
            }
        }

        return $next($request);
    }
}

=== File: CheckTripMembership.php ===

<?php

namespace App\Http\Middleware;

use App\Models\Trip;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class CheckTripMembership
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        // Get the trip from the route parameters
        $trip = $request->route('trip');
        
        if (!$trip instanceof Trip) {
            abort(404, 'Trip not found');
        }
        
        if (!Auth::check()) {
            return redirect()->route('login');
        }
        
        $userId = Auth::id();
        
        // Check if user is trip creator or member
        if ($trip->creator_id !== $userId && !$trip->isMember($userId)) {
            abort(403, 'You do not have access to this trip');
        }
        
        return $next($request);
    }
}

=== File: bundle_code.py ===

import os

EXCLUDED_DIRS = {"node_modules", "vendor", "tests", "storage"}
EXCLUDED_EXTENSIONS = {".jpg", ".jpeg", ".png", ".gif", ".webp", ".pdf", ".xml"}
EXCLUDED_FILES = {"package-lock.json", "composer.lock"}
OUTPUT_FILE = "bundled_code.txt"

def is_hidden(path):
    return any(part.startswith('.') for part in path.split(os.sep))

def should_skip_file(filepath, root):
    filename = os.path.basename(filepath)
    ext = os.path.splitext(filename)[1].lower()

    # Skip hidden files
    if is_hidden(os.path.relpath(filepath)):
        return True

    # Skip excluded files and extensions
    if ext in EXCLUDED_EXTENSIONS or filename in EXCLUDED_FILES:
        return True

    # Skip files in excluded dirs
    for part in os.path.relpath(root).split(os.sep):
        if part in EXCLUDED_DIRS:
            return True

    # Skip empty files
    if os.path.getsize(filepath) == 0:
        return True

    return False

with open(OUTPUT_FILE, "w", encoding="utf-8") as output:
    for root, dirs, files in os.walk("."):
        # Skip hidden directories
        dirs[:] = [d for d in dirs if not d.startswith(".") and d not in EXCLUDED_DIRS]

        for file in files:
            filepath = os.path.join(root, file)
            if should_skip_file(filepath, root):
                continue
            try:
                with open(filepath, "r", encoding="utf-8") as f:
                    output.write(f"\n\n=== File: {os.path.relpath(filepath)} ===\n\n")
                    output.write(f.read())
            except Exception as e:
                print(f"Skipped {filepath} due to error: {e}")


=== File: CheckRedisConnection.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redis;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;

class CheckRedisConnection
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        try {
            // Test Redis connection
            Redis::ping();
        } catch (\Exception $e) {
            // Log the error
            Log::error('Redis connection failed: ' . $e->getMessage());
            
            // Use file cache driver as fallback
            config(['cache.default' => 'file']);
            config(['session.driver' => 'file']);
            config(['queue.default' => 'database']);
        }

        return $next($request);
    }
}

=== File: TripStepMiddleware.php ===

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;

class TripStepMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        // If we're in the process of creating a trip
        if ($request->route()->getName() === 'trips.create') {
            // Ensure step is initialized
            if (!session()->has('trip_current_step')) {
                session(['trip_current_step' => 0]);
            }
            
            // Get current step from session
            $step = session('trip_current_step', 0);
            
            // Validate if requirements for current step are met
            if ($step >= 1 && !session()->has('selected_destination')) {
                // Force back to destination selection
                session(['trip_current_step' => 0]);
            } else if ($step >= 2 && !session()->has('trip_details')) {
                // Force back to trip details
                session(['trip_current_step' => 1]);
            }
        }
        
        return $next($request);
    }
}

=== File: RedirectIfAuthenticated.php ===

<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect()->route('dashboard');
            }
        }

        return $next($request);
    }
}