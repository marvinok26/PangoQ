

=== File: WalletTransaction.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class WalletTransaction extends Model
{
    use HasFactory;

    protected $fillable = [
        'wallet_id',
        'user_id',
        'type',
        'amount',
        'status',
        'payment_method',
        'transaction_reference',
    ];

    protected $casts = [
        'amount' => 'decimal:2',
    ];

    public function wallet(): BelongsTo
    {
        return $this->belongsTo(SavingsWallet::class, 'wallet_id');
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function isDeposit(): bool
    {
        return $this->type === 'deposit';
    }

    public function isWithdrawal(): bool
    {
        return $this->type === 'withdrawal';
    }

    public function isCompleted(): bool
    {
        return $this->status === 'completed';
    }
}

=== File: SavingsWallet.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Spatie\Translatable\HasTranslations;

class SavingsWallet extends Model
{
    use HasFactory, HasTranslations;

    public array $translatable = ['name'];

    protected $fillable = [
        'trip_id',
        'name',
        'minimum_goal',
        'custom_goal',
        'current_amount',
        'target_date',
        'contribution_frequency',
        'currency',
    ];

    protected $casts = [
        'minimum_goal' => 'decimal:2',
        'custom_goal' => 'decimal:2',
        'current_amount' => 'decimal:2',
        'target_date' => 'date',
    ];

    public function trip(): BelongsTo
    {
        return $this->belongsTo(Trip::class);
    }
    
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function transactions(): HasMany
    {
        return $this->hasMany(WalletTransaction::class, 'wallet_id');
    }

    /**
     * Get the effective target amount (either custom_goal if set, or minimum_goal).
     */
    public function getTargetAmountAttribute(): float
    {
        return $this->custom_goal ?? $this->minimum_goal;
    }

    public function getProgressPercentageAttribute(): float
    {
        if ($this->target_amount <= 0) {
            return 0;
        }

        $percentage = ($this->current_amount / $this->target_amount) * 100;
        return min(100, round($percentage, 2));
    }

    public function getRemainingAmountAttribute(): float
    {
        return max(0, $this->target_amount - $this->current_amount);
    }
}

=== File: TripMember.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class TripMember extends Model
{
    use HasFactory;
    
    protected $fillable = [
        'trip_id',
        'user_id',
        'role',
        'invitation_status',
        'invitation_email'
    ];
    
    // A trip member belongs to a trip
    public function trip()
    {
        return $this->belongsTo(Trip::class);
    }
    
    // A trip member belongs to a user
    public function user()
    {
        return $this->belongsTo(User::class);
    }
    
    // Scope for pending invitations
    public function scopePending($query)
    {
        return $query->where('invitation_status', 'pending');
    }
    
    // Scope for accepted invitations
    public function scopeAccepted($query)
    {
        return $query->where('invitation_status', 'accepted');
    }
    
    // Scope for declined invitations
    public function scopeDeclined($query)
    {
        return $query->where('invitation_status', 'declined');
    }
}

=== File: Activity.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Activity extends Model
{
    use HasFactory;
    
    protected $fillable = [
        'itinerary_id',
        'title',
        'description',
        'location',
        'start_time',
        'end_time',
        'cost',
        'category',
        'image_url',
        'is_optional', 
        'is_highlight',
        'created_by',
        'type'
    ];
    
    protected $casts = [
        'cost' => 'decimal:2',
        'is_optional' => 'boolean',
        'is_highlight' => 'boolean'
    ];
    
    /**
     * Get the itinerary that owns the activity.
     */
    public function itinerary(): BelongsTo
    {
        return $this->belongsTo(Itinerary::class);
    }
    
    /**
     * Get the user who created the activity.
     */
    public function creator(): BelongsTo
    {
        return $this->belongsTo(User::class, 'created_by');
    }
    
    /**
     * Get the formatted time range.
     */
    public function getFormattedTimeRangeAttribute(): string
    {
        if (!$this->start_time || !$this->end_time) {
            return 'Flexible';
        }
        
        return date('g:i A', strtotime($this->start_time)) . ' - ' . date('g:i A', strtotime($this->end_time));
    }
    
    /**
     * Get the formatted cost.
     */
    public function getFormattedCostAttribute(): string
    {
        if ($this->cost === null || $this->cost == 0) {
            return 'Free';
        }
        
        return '$' . number_format($this->cost, 2);
    }
    
    /**
     * Get the time of day category.
     */
    public function getTimeOfDayAttribute(): string
    {
        if (!$this->start_time) {
            return 'flexible';
        }
        
        $hour = (int) date('H', strtotime($this->start_time));
        
        if ($hour < 12) {
            return 'morning';
        } elseif ($hour < 17) {
            return 'afternoon';
        } else {
            return 'evening';
        }
    }
    
    /**
     * Get the time of day icon.
     */
    public function getTimeOfDayIconAttribute(): string
    {
        return match($this->time_of_day) {
            'morning' => 'coffee',
            'afternoon' => 'umbrella',
            'evening' => 'moon',
            'flexible' => 'calendar',
            default => 'clock',
        };
    }
    
    /**
     * Get the time of day color.
     */
    public function getTimeOfDayColorAttribute(): string
    {
        return match($this->time_of_day) {
            'morning' => 'yellow',
            'afternoon' => 'orange',
            'evening' => 'indigo',
            'flexible' => 'blue',
            default => 'gray',
        };
    }
    
    /**
     * Determine if this is an optional activity.
     */
    public function isOptional(): bool
    {
        return $this->is_optional === true;
    }
    
    /**
     * Create an Activity from a TemplateActivity.
     */
    public static function createFromTemplate(TemplateActivity $templateActivity, $itineraryId): self
    {
        return self::create([
            'itinerary_id' => $itineraryId,
            'title' => $templateActivity->title,
            'description' => $templateActivity->description,
            'location' => $templateActivity->location,
            'start_time' => $templateActivity->start_time,
            'end_time' => $templateActivity->end_time,
            'cost' => $templateActivity->cost,
            'type' => $templateActivity->category ?? 'activity',
            'category' => $templateActivity->category ?? 'activity',
            'is_optional' => $templateActivity->is_optional ?? false,
        ]);
    }
}

=== File: Trip.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;

class Trip extends Model
{
    use HasFactory;

    protected $fillable = [
        'creator_id',
        'trip_template_id',
        'planning_type',
        'title',
        'description',
        'destination',
        'start_date',
        'end_date',
        'budget',
        'total_cost',
        'selected_optional_activities',
        'status'
    ];

    protected $casts = [
        'start_date' => 'date',
        'end_date' => 'date',
        'budget' => 'decimal:2',
        'total_cost' => 'decimal:2',
        'selected_optional_activities' => 'array'
    ];

    /**
     * Create trip itineraries from the template
     */
    public function createItinerariesFromTemplate()
    {
        if (!$this->tripTemplate) {
            return;
        }

        // Get regular activities from the template
        $regularActivities = $this->tripTemplate->regularActivities()->get()->groupBy('day_number');
        
        // Get selected optional activities
        $selectedOptionalActivities = $this->selected_optional_activities ?? [];
        $optionalActivityIds = [];
        
        // Extract IDs from selected optional activities array
        if (is_array($selectedOptionalActivities)) {
            if (isset(reset($selectedOptionalActivities)['id'])) {
                // Format: [activityId => ['id' => activityId, 'title' => '...', 'cost' => '...'], ...]
                $optionalActivityIds = array_keys($selectedOptionalActivities);
            } else {
                // Format: [activityId, activityId, ...]
                $optionalActivityIds = $selectedOptionalActivities;
            }
        }
        
        // Fetch the optional activities if we have selected IDs
        $optionalActivities = [];
        if (!empty($optionalActivityIds)) {
            $optionalActivities = TemplateActivity::whereIn('id', $optionalActivityIds)
                ->where('is_optional', true)
                ->get();
        }

        // Create itineraries for each day of the trip
        for ($day = 1; $day <= $this->tripTemplate->duration_days; $day++) {
            // Calculate the date for this day
            $date = Carbon::parse($this->start_date)->addDays($day - 1);
            
            // Create itinerary
            $itinerary = Itinerary::create([
                'trip_id' => $this->id,
                'title' => "Day $day: " . $this->destination,
                'description' => "Activities for day $day in " . $this->destination,
                'day_number' => $day,
                'date' => $date,
            ]);
            
            // Add regular activities for this day
            if (isset($regularActivities[$day])) {
                foreach ($regularActivities[$day] as $templateActivity) {
                    Activity::createFromTemplate($templateActivity, $itinerary->id);
                }
            }
        }
        
        // Now add optional activities to the appropriate days
        foreach ($optionalActivities as $activity) {
            $dayNumber = $activity->day_number ?? 1;
            
            // Find the itinerary for this day
            $itinerary = $this->itineraries()
                ->where('day_number', $dayNumber)
                ->first();
                
            // If no itinerary found for this day, add to first day
            if (!$itinerary) {
                $itinerary = $this->itineraries()
                    ->orderBy('day_number')
                    ->first();
            }
            
            // Add the optional activity if we have an itinerary
            if ($itinerary) {
                Activity::createFromTemplate($activity, $itinerary->id);
            }
        }
    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'creator_id');
    }

    public function members()
    {
        return $this->hasMany(TripMember::class);
    }

    public function tripTemplate()
    {
        return $this->belongsTo(TripTemplate::class);
    }

    public function itineraries()
    {
        return $this->hasMany(Itinerary::class);
    }

    public function savingsWallet()
    {
        return $this->hasOne(SavingsWallet::class);
    }
    
    /**
     * Get all activities across all itineraries.
     */
    public function allActivities()
    {
        return Activity::whereIn('itinerary_id', $this->itineraries()->pluck('id'));
    }
    
    /**
     * Get the trip duration in days.
     */
    public function getDurationAttribute()
    {
        if (!$this->start_date || !$this->end_date) {
            return 0;
        }
        
        return $this->start_date->diffInDays($this->end_date) + 1;
    }
    
    /**
     * Get the formatted date range.
     */
    public function getDateRangeAttribute()
    {
        if (!$this->start_date || !$this->end_date) {
            return 'Dates not set';
        }
        
        if ($this->start_date->format('Y-m') === $this->end_date->format('Y-m')) {
            return $this->start_date->format('M d') . ' - ' . $this->end_date->format('d, Y');
        }
        
        if ($this->start_date->format('Y') === $this->end_date->format('Y')) {
            return $this->start_date->format('M d') . ' - ' . $this->end_date->format('M d, Y');
        }
        
        return $this->start_date->format('M d, Y') . ' - ' . $this->end_date->format('M d, Y');
    }
}

=== File: TripTemplate.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class TripTemplate extends Model
{
    use HasFactory;

    protected $fillable = [
        'destination_id',
        'title',
        'description',
        'highlights',
        'duration_days',
        'base_price',
        'difficulty_level',
        'trip_style',
        'is_featured',
        'featured_image'
    ];

    protected $casts = [
        'base_price' => 'decimal:2',
        'is_featured' => 'boolean',
        'highlights' => 'array'
    ];

    public function destination()
    {
        return $this->belongsTo(Destination::class);
    }

    public function activities()
    {
        return $this->hasMany(TemplateActivity::class);
    }

    public function trips()
    {
        return $this->hasMany(Trip::class);
    }
    
    /**
     * Get all activities for a specific day
     */
    public function getDayActivities($day)
    {
        return $this->activities()->where('day_number', $day)->orderBy('start_time')->get();
    }
    
    /**
     * Get regular (non-optional) activities
     */
    public function regularActivities()
    {
        return $this->activities()->where('is_optional', false);
    }
    
    /**
     * Get optional activities
     */
    public function optionalActivities()
    {
        return $this->activities()->where('is_optional', true);
    }
    
    /**
     * Calculate total cost of all activities
     */
    public function getTotalActivitiesCost()
    {
        return $this->activities()->sum('cost');
    }
    
    /**
     * Calculate total cost of all regular activities
     */
    public function getRegularActivitiesCost()
    {
        return $this->regularActivities()->sum('cost');
    }
    
    /**
     * Calculate total cost of all optional activities
     */
    public function getOptionalActivitiesCost()
    {
        return $this->optionalActivities()->sum('cost');
    }
    
    /**
     * Get the highlights as an array
     */
    public function getHighlightsArrayAttribute()
    {
        if (!$this->highlights) {
            return [];
        }
        
        if (is_array($this->highlights)) {
            return $this->highlights;
        }
        
        return json_decode($this->highlights, true) ?? [];
    }
    
    /**
     * Get a summary of trip details for display
     */
    public function getSummary()
    {
        return [
            'id' => $this->id,
            'title' => $this->title,
            'destination' => $this->destination->name,
            'duration' => $this->duration_days,
            'price' => $this->base_price,
            'difficulty' => $this->difficulty_level,
            'style' => $this->trip_style,
            'activities_count' => $this->regularActivities()->count(),
            'optional_activities_count' => $this->optionalActivities()->count(),
        ];
    }
}

=== File: Notification.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Carbon;

class Notification extends Model
{
    use HasFactory;
    
    protected $fillable = [
        'user_id',
        'type',
        'title',
        'message',
        'read_at',
    ];
    
    protected $casts = [
        'read_at' => 'datetime',
    ];
    
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }
    
    public function isRead(): bool
    {
        return $this->read_at !== null;
    }
    
    public function markAsRead(): void
    {
        $this->update(['read_at' => Carbon::now()]);
    }
}

=== File: User.php ===

<?php

namespace App\Models;

use App\Traits\HasSavings;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens, HasFactory, Notifiable, HasSavings;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'auth_provider',
        'auth_provider_id',
        'profile_photo_path',
        'phone_number',
        'id_card_number',
        'passport_number',
        'date_of_birth',
        'gender',
        'nationality',
        'address',
        'account_number',
        'account_type',
        'currency',
        'linked_bank_account',
        'wallet_provider',
        'account_status',
        'preferred_payment_method',
        'daily_transaction_limit',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
        'date_of_birth' => 'date',
        'daily_transaction_limit' => 'decimal:2',
    ];

    /**
     * Boot the model.
     */
    protected static function boot()
    {
        parent::boot();

        // Generate account number on user creation if not set
        static::creating(function ($user) {
            if (empty($user->account_number)) {
                $user->account_number = self::generateAccountNumber();
            }
        });
    }

    /**
     * Generate a unique account number.
     */
    public static function generateAccountNumber()
    {
        $prefix = '0551';
        $random = sprintf('%06d', mt_rand(0, 999999));
        
        $accountNumber = $prefix . $random;
        
        // Ensure it's unique
        while (self::where('account_number', $accountNumber)->exists()) {
            $random = sprintf('%06d', mt_rand(0, 999999));
            $accountNumber = $prefix . $random;
        }
        
        return $accountNumber;
    }

    /**
     * The trips that this user has created.
     */
    public function createdTrips(): HasMany
    {
        return $this->hasMany(Trip::class, 'creator_id');
    }

    /**
     * The trip memberships of this user.
     */
    public function tripMemberships(): HasMany
    {
        return $this->hasMany(TripMember::class);
    }

    /**
     * The trips that this user is a member of.
     */
    public function trips(): BelongsToMany
    {
        return $this->belongsToMany(Trip::class, 'trip_members')
            ->withPivot('role', 'invitation_status')
            ->wherePivot('invitation_status', 'accepted')
            ->withTimestamps();
    }

    /**
     * All the wallet transactions made by this user.
     */
    public function walletTransactions(): HasMany
    {
        return $this->hasMany(WalletTransaction::class);
    }

    /**
     * Get all savings wallets for this user.
     */
    public function savingsWallets()
    {
        return $this->hasManyThrough(SavingsWallet::class, Trip::class, 'creator_id');
    }

    /**
     * Get the user's total savings amount.
     */
    public function getTotalSavingsAttribute()
    {
        return $this->savingsWallets()->sum('current_amount');
    }

    /**
     * Get the user's total savings goal.
     */
    public function getTotalSavingsGoalAttribute()
    {
        // Use minimum_goal instead of target_amount
        return $this->savingsWallets()->sum('minimum_goal');
    }

    /**
     * Get the user's savings progress percentage.
     */
    public function getSavingsProgressPercentageAttribute()
    {
        $goal = $this->total_savings_goal;
        
        if ($goal <= 0) {
            return 0;
        }
        
        $percentage = ($this->total_savings / $goal) * 100;
        return min(100, round($percentage, 1));
    }

    /**
     * Get the user's profile photo URL.
     */
    public function getPhotoUrlAttribute(): string
    {
        // If profile_photo_path is a complete URL (social media avatar)
        if ($this->profile_photo_path && filter_var($this->profile_photo_path, FILTER_VALIDATE_URL)) {
            return $this->profile_photo_path;
        }
        
        // If it's a local path
        if ($this->profile_photo_path) {
            // Simple approach that assumes files are in public/storage
            return url('storage/' . $this->profile_photo_path);
        }
        
        // Fallback to Gravatar
        $hash = md5(strtolower(trim($this->email)));
        return "https://www.gravatar.com/avatar/{$hash}?d=mp&s=200";
    }

    /**
     * Get the user's initials (for avatar fallback).
     */
    public function getInitialsAttribute(): string
    {
        $parts = explode(' ', $this->name);

        if (count($parts) >= 2) {
            return mb_substr($parts[0], 0, 1) . mb_substr(end($parts), 0, 1);
        }

        return mb_substr($this->name, 0, 2);
    }
}

=== File: Destination.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Destination extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'country',
        'city',
        'description',
        'image_url',
    ];

    /**
     * Get the trip templates for the destination.
     */
    public function tripTemplates()
    {
        return $this->hasMany(TripTemplate::class);
    }
}

=== File: bundled_code.txt ===



=== File: WalletTransaction.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class WalletTransaction extends Model
{
    use HasFactory;

    protected $fillable = [
        'wallet_id',
        'user_id',
        'type',
        'amount',
        'status',
        'payment_method',
        'transaction_reference',
    ];

    protected $casts = [
        'amount' => 'decimal:2',
    ];

    public function wallet(): BelongsTo
    {
        return $this->belongsTo(SavingsWallet::class, 'wallet_id');
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function isDeposit(): bool
    {
        return $this->type === 'deposit';
    }

    public function isWithdrawal(): bool
    {
        return $this->type === 'withdrawal';
    }

    public function isCompleted(): bool
    {
        return $this->status === 'completed';
    }
}

=== File: SavingsWallet.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Spatie\Translatable\HasTranslations;

class SavingsWallet extends Model
{
    use HasFactory, HasTranslations;

    public array $translatable = ['name'];

    protected $fillable = [
        'trip_id',
        'name',
        'minimum_goal',
        'custom_goal',
        'current_amount',
        'target_date',
        'contribution_frequency',
        'currency',
    ];

    protected $casts = [
        'minimum_goal' => 'decimal:2',
        'custom_goal' => 'decimal:2',
        'current_amount' => 'decimal:2',
        'target_date' => 'date',
    ];

    public function trip(): BelongsTo
    {
        return $this->belongsTo(Trip::class);
    }
    
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function transactions(): HasMany
    {
        return $this->hasMany(WalletTransaction::class, 'wallet_id');
    }

    /**
     * Get the effective target amount (either custom_goal if set, or minimum_goal).
     */
    public function getTargetAmountAttribute(): float
    {
        return $this->custom_goal ?? $this->minimum_goal;
    }

    public function getProgressPercentageAttribute(): float
    {
        if ($this->target_amount <= 0) {
            return 0;
        }

        $percentage = ($this->current_amount / $this->target_amount) * 100;
        return min(100, round($percentage, 2));
    }

    public function getRemainingAmountAttribute(): float
    {
        return max(0, $this->target_amount - $this->current_amount);
    }
}

=== File: TripMember.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class TripMember extends Model
{
    use HasFactory;
    
    protected $fillable = [
        'trip_id',
        'user_id',
        'role',
        'invitation_status',
        'invitation_email'
    ];
    
    // A trip member belongs to a trip
    public function trip()
    {
        return $this->belongsTo(Trip::class);
    }
    
    // A trip member belongs to a user
    public function user()
    {
        return $this->belongsTo(User::class);
    }
    
    // Scope for pending invitations
    public function scopePending($query)
    {
        return $query->where('invitation_status', 'pending');
    }
    
    // Scope for accepted invitations
    public function scopeAccepted($query)
    {
        return $query->where('invitation_status', 'accepted');
    }
    
    // Scope for declined invitations
    public function scopeDeclined($query)
    {
        return $query->where('invitation_status', 'declined');
    }
}

=== File: Activity.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Activity extends Model
{
    use HasFactory;
    
    protected $fillable = [
        'itinerary_id',
        'title',
        'description',
        'location',
        'start_time',
        'end_time',
        'cost',
        'category',
        'image_url',
        'is_optional', 
        'is_highlight',
        'created_by',
        'type'
    ];
    
    protected $casts = [
        'cost' => 'decimal:2',
        'is_optional' => 'boolean',
        'is_highlight' => 'boolean'
    ];
    
    /**
     * Get the itinerary that owns the activity.
     */
    public function itinerary(): BelongsTo
    {
        return $this->belongsTo(Itinerary::class);
    }
    
    /**
     * Get the user who created the activity.
     */
    public function creator(): BelongsTo
    {
        return $this->belongsTo(User::class, 'created_by');
    }
    
    /**
     * Get the formatted time range.
     */
    public function getFormattedTimeRangeAttribute(): string
    {
        if (!$this->start_time || !$this->end_time) {
            return 'Flexible';
        }
        
        return date('g:i A', strtotime($this->start_time)) . ' - ' . date('g:i A', strtotime($this->end_time));
    }
    
    /**
     * Get the formatted cost.
     */
    public function getFormattedCostAttribute(): string
    {
        if ($this->cost === null || $this->cost == 0) {
            return 'Free';
        }
        
        return '$' . number_format($this->cost, 2);
    }
    
    /**
     * Get the time of day category.
     */
    public function getTimeOfDayAttribute(): string
    {
        if (!$this->start_time) {
            return 'flexible';
        }
        
        $hour = (int) date('H', strtotime($this->start_time));
        
        if ($hour < 12) {
            return 'morning';
        } elseif ($hour < 17) {
            return 'afternoon';
        } else {
            return 'evening';
        }
    }
    
    /**
     * Get the time of day icon.
     */
    public function getTimeOfDayIconAttribute(): string
    {
        return match($this->time_of_day) {
            'morning' => 'coffee',
            'afternoon' => 'umbrella',
            'evening' => 'moon',
            'flexible' => 'calendar',
            default => 'clock',
        };
    }
    
    /**
     * Get the time of day color.
     */
    public function getTimeOfDayColorAttribute(): string
    {
        return match($this->time_of_day) {
            'morning' => 'yellow',
            'afternoon' => 'orange',
            'evening' => 'indigo',
            'flexible' => 'blue',
            default => 'gray',
        };
    }
    
    /**
     * Determine if this is an optional activity.
     */
    public function isOptional(): bool
    {
        return $this->is_optional === true;
    }
    
    /**
     * Create an Activity from a TemplateActivity.
     */
    public static function createFromTemplate(TemplateActivity $templateActivity, $itineraryId): self
    {
        return self::create([
            'itinerary_id' => $itineraryId,
            'title' => $templateActivity->title,
            'description' => $templateActivity->description,
            'location' => $templateActivity->location,
            'start_time' => $templateActivity->start_time,
            'end_time' => $templateActivity->end_time,
            'cost' => $templateActivity->cost,
            'type' => $templateActivity->category ?? 'activity',
            'category' => $templateActivity->category ?? 'activity',
            'is_optional' => $templateActivity->is_optional ?? false,
        ]);
    }
}

=== File: Trip.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;

class Trip extends Model
{
    use HasFactory;

    protected $fillable = [
        'creator_id',
        'trip_template_id',
        'planning_type',
        'title',
        'description',
        'destination',
        'start_date',
        'end_date',
        'budget',
        'total_cost',
        'selected_optional_activities',
        'status'
    ];

    protected $casts = [
        'start_date' => 'date',
        'end_date' => 'date',
        'budget' => 'decimal:2',
        'total_cost' => 'decimal:2',
        'selected_optional_activities' => 'array'
    ];

    /**
     * Create trip itineraries from the template
     */
    public function createItinerariesFromTemplate()
    {
        if (!$this->tripTemplate) {
            return;
        }

        // Get regular activities from the template
        $regularActivities = $this->tripTemplate->regularActivities()->get()->groupBy('day_number');
        
        // Get selected optional activities
        $selectedOptionalActivities = $this->selected_optional_activities ?? [];
        $optionalActivityIds = [];
        
        // Extract IDs from selected optional activities array
        if (is_array($selectedOptionalActivities)) {
            if (isset(reset($selectedOptionalActivities)['id'])) {
                // Format: [activityId => ['id' => activityId, 'title' => '...', 'cost' => '...'], ...]
                $optionalActivityIds = array_keys($selectedOptionalActivities);
            } else {
                // Format: [activityId, activityId, ...]
                $optionalActivityIds = $selectedOptionalActivities;
            }
        }
        
        // Fetch the optional activities if we have selected IDs
        $optionalActivities = [];
        if (!empty($optionalActivityIds)) {
            $optionalActivities = TemplateActivity::whereIn('id', $optionalActivityIds)
                ->where('is_optional', true)
                ->get();
        }

        // Create itineraries for each day of the trip
        for ($day = 1; $day <= $this->tripTemplate->duration_days; $day++) {
            // Calculate the date for this day
            $date = Carbon::parse($this->start_date)->addDays($day - 1);
            
            // Create itinerary
            $itinerary = Itinerary::create([
                'trip_id' => $this->id,
                'title' => "Day $day: " . $this->destination,
                'description' => "Activities for day $day in " . $this->destination,
                'day_number' => $day,
                'date' => $date,
            ]);
            
            // Add regular activities for this day
            if (isset($regularActivities[$day])) {
                foreach ($regularActivities[$day] as $templateActivity) {
                    Activity::createFromTemplate($templateActivity, $itinerary->id);
                }
            }
        }
        
        // Now add optional activities to the appropriate days
        foreach ($optionalActivities as $activity) {
            $dayNumber = $activity->day_number ?? 1;
            
            // Find the itinerary for this day
            $itinerary = $this->itineraries()
                ->where('day_number', $dayNumber)
                ->first();
                
            // If no itinerary found for this day, add to first day
            if (!$itinerary) {
                $itinerary = $this->itineraries()
                    ->orderBy('day_number')
                    ->first();
            }
            
            // Add the optional activity if we have an itinerary
            if ($itinerary) {
                Activity::createFromTemplate($activity, $itinerary->id);
            }
        }
    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'creator_id');
    }

    public function members()
    {
        return $this->hasMany(TripMember::class);
    }

    public function tripTemplate()
    {
        return $this->belongsTo(TripTemplate::class);
    }

    public function itineraries()
    {
        return $this->hasMany(Itinerary::class);
    }

    public function savingsWallet()
    {
        return $this->hasOne(SavingsWallet::class);
    }
    
    /**
     * Get all activities across all itineraries.
     */
    public function allActivities()
    {
        return Activity::whereIn('itinerary_id', $this->itineraries()->pluck('id'));
    }
    
    /**
     * Get the trip duration in days.
     */
    public function getDurationAttribute()
    {
        if (!$this->start_date || !$this->end_date) {
            return 0;
        }
        
        return $this->start_date->diffInDays($this->end_date) + 1;
    }
    
    /**
     * Get the formatted date range.
     */
    public function getDateRangeAttribute()
    {
        if (!$this->start_date || !$this->end_date) {
            return 'Dates not set';
        }
        
        if ($this->start_date->format('Y-m') === $this->end_date->format('Y-m')) {
            return $this->start_date->format('M d') . ' - ' . $this->end_date->format('d, Y');
        }
        
        if ($this->start_date->format('Y') === $this->end_date->format('Y')) {
            return $this->start_date->format('M d') . ' - ' . $this->end_date->format('M d, Y');
        }
        
        return $this->start_date->format('M d, Y') . ' - ' . $this->end_date->format('M d, Y');
    }
}

=== File: TripTemplate.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class TripTemplate extends Model
{
    use HasFactory;

    protected $fillable = [
        'destination_id',
        'title',
        'description',
        'highlights',
        'duration_days',
        'base_price',
        'difficulty_level',
        'trip_style',
        'is_featured',
        'featured_image'
    ];

    protected $casts = [
        'base_price' => 'decimal:2',
        'is_featured' => 'boolean',
        'highlights' => 'array'
    ];

    public function destination()
    {
        return $this->belongsTo(Destination::class);
    }

    public function activities()
    {
        return $this->hasMany(TemplateActivity::class);
    }

    public function trips()
    {
        return $this->hasMany(Trip::class);
    }
    
    /**
     * Get all activities for a specific day
     */
    public function getDayActivities($day)
    {
        return $this->activities()->where('day_number', $day)->orderBy('start_time')->get();
    }
    
    /**
     * Get regular (non-optional) activities
     */
    public function regularActivities()
    {
        return $this->activities()->where('is_optional', false);
    }
    
    /**
     * Get optional activities
     */
    public function optionalActivities()
    {
        return $this->activities()->where('is_optional', true);
    }
    
    /**
     * Calculate total cost of all activities
     */
    public function getTotalActivitiesCost()
    {
        return $this->activities()->sum('cost');
    }
    
    /**
     * Calculate total cost of all regular activities
     */
    public function getRegularActivitiesCost()
    {
        return $this->regularActivities()->sum('cost');
    }
    
    /**
     * Calculate total cost of all optional activities
     */
    public function getOptionalActivitiesCost()
    {
        return $this->optionalActivities()->sum('cost');
    }
    
    /**
     * Get the highlights as an array
     */
    public function getHighlightsArrayAttribute()
    {
        if (!$this->highlights) {
            return [];
        }
        
        if (is_array($this->highlights)) {
            return $this->highlights;
        }
        
        return json_decode($this->highlights, true) ?? [];
    }
    
    /**
     * Get a summary of trip details for display
     */
    public function getSummary()
    {
        return [
            'id' => $this->id,
            'title' => $this->title,
            'destination' => $this->destination->name,
            'duration' => $this->duration_days,
            'price' => $this->base_price,
            'difficulty' => $this->difficulty_level,
            'style' => $this->trip_style,
            'activities_count' => $this->regularActivities()->count(),
            'optional_activities_count' => $this->optionalActivities()->count(),
        ];
    }
}

=== File: Notification.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Carbon;

class Notification extends Model
{
    use HasFactory;
    
    protected $fillable = [
        'user_id',
        'type',
        'title',
        'message',
        'read_at',
    ];
    
    protected $casts = [
        'read_at' => 'datetime',
    ];
    
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }
    
    public function isRead(): bool
    {
        return $this->read_at !== null;
    }
    
    public function markAsRead(): void
    {
        $this->update(['read_at' => Carbon::now()]);
    }
}

=== File: User.php ===

<?php

namespace App\Models;

use App\Traits\HasSavings;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens, HasFactory, Notifiable, HasSavings;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'auth_provider',
        'auth_provider_id',
        'profile_photo_path',
        'phone_number',
        'id_card_number',
        'passport_number',
        'date_of_birth',
        'gender',
        'nationality',
        'address',
        'account_number',
        'account_type',
        'currency',
        'linked_bank_account',
        'wallet_provider',
        'account_status',
        'preferred_payment_method',
        'daily_transaction_limit',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
        'date_of_birth' => 'date',
        'daily_transaction_limit' => 'decimal:2',
    ];

    /**
     * Boot the model.
     */
    protected static function boot()
    {
        parent::boot();

        // Generate account number on user creation if not set
        static::creating(function ($user) {
            if (empty($user->account_number)) {
                $user->account_number = self::generateAccountNumber();
            }
        });
    }

    /**
     * Generate a unique account number.
     */
    public static function generateAccountNumber()
    {
        $prefix = '0551';
        $random = sprintf('%06d', mt_rand(0, 999999));
        
        $accountNumber = $prefix . $random;
        
        // Ensure it's unique
        while (self::where('account_number', $accountNumber)->exists()) {
            $random = sprintf('%06d', mt_rand(0, 999999));
            $accountNumber = $prefix . $random;
        }
        
        return $accountNumber;
    }

    /**
     * The trips that this user has created.
     */
    public function createdTrips(): HasMany
    {
        return $this->hasMany(Trip::class, 'creator_id');
    }

    /**
     * The trip memberships of this user.
     */
    public function tripMemberships(): HasMany
    {
        return $this->hasMany(TripMember::class);
    }

    /**
     * The trips that this user is a member of.
     */
    public function trips(): BelongsToMany
    {
        return $this->belongsToMany(Trip::class, 'trip_members')
            ->withPivot('role', 'invitation_status')
            ->wherePivot('invitation_status', 'accepted')
            ->withTimestamps();
    }

    /**
     * All the wallet transactions made by this user.
     */
    public function walletTransactions(): HasMany
    {
        return $this->hasMany(WalletTransaction::class);
    }

    /**
     * Get all savings wallets for this user.
     */
    public function savingsWallets()
    {
        return $this->hasManyThrough(SavingsWallet::class, Trip::class, 'creator_id');
    }

    /**
     * Get the user's total savings amount.
     */
    public function getTotalSavingsAttribute()
    {
        return $this->savingsWallets()->sum('current_amount');
    }

    /**
     * Get the user's total savings goal.
     */
    public function getTotalSavingsGoalAttribute()
    {
        // Use minimum_goal instead of target_amount
        return $this->savingsWallets()->sum('minimum_goal');
    }

    /**
     * Get the user's savings progress percentage.
     */
    public function getSavingsProgressPercentageAttribute()
    {
        $goal = $this->total_savings_goal;
        
        if ($goal <= 0) {
            return 0;
        }
        
        $percentage = ($this->total_savings / $goal) * 100;
        return min(100, round($percentage, 1));
    }

    /**
     * Get the user's profile photo URL.
     */
    public function getPhotoUrlAttribute(): string
    {
        // If profile_photo_path is a complete URL (social media avatar)
        if ($this->profile_photo_path && filter_var($this->profile_photo_path, FILTER_VALIDATE_URL)) {
            return $this->profile_photo_path;
        }
        
        // If it's a local path
        if ($this->profile_photo_path) {
            // Simple approach that assumes files are in public/storage
            return url('storage/' . $this->profile_photo_path);
        }
        
        // Fallback to Gravatar
        $hash = md5(strtolower(trim($this->email)));
        return "https://www.gravatar.com/avatar/{$hash}?d=mp&s=200";
    }

    /**
     * Get the user's initials (for avatar fallback).
     */
    public function getInitialsAttribute(): string
    {
        $parts = explode(' ', $this->name);

        if (count($parts) >= 2) {
            return mb_substr($parts[0], 0, 1) . mb_substr(end($parts), 0, 1);
        }

        return mb_substr($this->name, 0, 2);
    }
}

=== File: TemplateActivity.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class TemplateActivity extends Model
{
    use HasFactory;
    
    protected $fillable = [
        'trip_template_id',
        'title',
        'description',
        'location',
        'day_number',
        'time_of_day',
        'start_time',
        'end_time',
        'cost',
        'category',
        'image_url',
        'is_optional',
        'is_highlight'
    ];
    
    protected $casts = [
        'is_optional' => 'boolean',
        'is_highlight' => 'boolean',
        'cost' => 'decimal:2'
    ];
    
    public function tripTemplate()
    {
        return $this->belongsTo(TripTemplate::class);
    }
}

=== File: Itinerary.php ===

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Itinerary extends Model
{
    use HasFactory;
    
    protected $fillable = [
        'trip_id',
        'title',
        'description',
        'day_number',
        'date',
    ];
    
    protected $casts = [
        'date' => 'date',
    ];
    
    /**
     * Get the trip that owns the itinerary.
     */
    public function trip(): BelongsTo
    {
        return $this->belongsTo(Trip::class);
    }
    
    /**
     * Get the activities for the itinerary.
     */
    public function activities(): HasMany
    {
        return $this->hasMany(Activity::class)->orderBy('start_time');
    }
    
    /**
     * Get regular (non-optional) activities.
     */
    public function regularActivities()
    {
        return $this->activities()->where('is_optional', false);
    }
    
    /**
     * Get optional activities.
     */
    public function optionalActivities()
    {
        return $this->activities()->where('is_optional', true);
    }
    
    /**
     * Get the number of activities in this itinerary.
     */
    public function getActivityCountAttribute(): int
    {
        return $this->activities()->count();
    }
    
    /**
     * Get the activities for the itinerary grouped by time of day.
     */
    public function activitiesByTimeOfDay(): array
    {
        $activities = $this->activities()->get();
        $groupedActivities = [
            'morning' => [],
            'afternoon' => [],
            'evening' => [],
        ];
        
        foreach ($activities as $activity) {
            $hour = (int) date('H', strtotime($activity->start_time ?? '12:00:00'));
            
            if ($hour < 12) {
                $groupedActivities['morning'][] = $activity;
            } elseif ($hour < 17) {
                $groupedActivities['afternoon'][] = $activity;
            } else {
                $groupedActivities['evening'][] = $activity;
            }
        }
        
        return $groupedActivities;
    }
    
    /**
     * Get the date formatted nicely.
     */
    public function getFormattedDateAttribute(): string
    {
        return $this->date->format('M d, Y');
    }
    
    /**
     * Get the short date.
     */
    public function getShortDateAttribute(): string
    {
        return $this->date->format('M d');
    }
}